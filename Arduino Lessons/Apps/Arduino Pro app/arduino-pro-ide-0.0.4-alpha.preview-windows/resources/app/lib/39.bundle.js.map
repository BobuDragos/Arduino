{"version":3,"sources":["webpack:///./node_modules/@theia/cpp/src/browser/cpp-build-configurations-statusbar-element.ts","webpack:///./node_modules/@theia/cpp/src/browser/cpp-build-configurations-ui.ts","webpack:///./node_modules/@theia/cpp/src/browser/cpp-build-configurations.ts","webpack:///./node_modules/@theia/cpp/src/browser/cpp-commands.ts","webpack:///./node_modules/@theia/cpp/src/browser/cpp-frontend-module.ts","webpack:///./node_modules/@theia/cpp/src/browser/cpp-keybinding.ts","webpack:///./node_modules/@theia/cpp/src/browser/cpp-language-client-contribution.ts","webpack:///./node_modules/@theia/cpp/src/browser/cpp-preferences.ts","webpack:///./node_modules/@theia/cpp/src/browser/cpp-protocol.ts","webpack:///./node_modules/@theia/cpp/src/browser/cpp-task-provider.ts","webpack:///./node_modules/@theia/cpp/src/common/cpp-build-configuration-protocol.ts","webpack:///./node_modules/@theia/cpp/src/common/index.ts","webpack:///./node_modules/string-argv/index.js"],"names":[],"mappings":"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","file":"39.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018-2019 Ericsson\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject } from 'inversify';\nimport { StatusBar, StatusBarAlignment } from '@theia/core/lib/browser';\nimport { CppBuildConfigurationManager, CppBuildConfiguration } from './cpp-build-configurations';\nimport { CPP_CHANGE_BUILD_CONFIGURATION } from './cpp-build-configurations-ui';\nimport { WorkspaceService } from '@theia/workspace/lib/browser';\n\n@injectable()\nexport class CppBuildConfigurationsStatusBarElement {\n\n    @inject(CppBuildConfigurationManager)\n    protected readonly cppManager: CppBuildConfigurationManager;\n\n    @inject(StatusBar)\n    protected readonly statusBar: StatusBar;\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    protected readonly cppIdentifier = 'cpp-configurator';\n\n    /**\n     * Display the `CppBuildConfiguration` status bar element,\n     * and listen to changes to the active build configuration.\n     */\n    show(): void {\n        this.setCppBuildConfigElement(this.getValidActiveCount());\n        this.cppManager.onActiveConfigChange2(configs => this.setCppBuildConfigElement(configs.size));\n    }\n\n    /**\n     * Set the `CppBuildConfiguration` status bar element\n     * used to create a new cpp build configuration and set the active build configuration.\n     *\n     * @param config the active `CppBuildConfiguration`.\n     */\n    protected setCppBuildConfigElement(count: number): void {\n        this.statusBar.setElement(this.cppIdentifier, {\n            text: `$(wrench) C/C++ Build Config (${count} of ${this.workspaceService.tryGetRoots().length})`,\n            tooltip: 'C/C++ Build Config',\n            alignment: StatusBarAlignment.RIGHT,\n            command: CPP_CHANGE_BUILD_CONFIGURATION.id,\n            priority: 0.5,\n        });\n    }\n\n    /**\n     * Get the valid active configuration count.\n     */\n    protected getValidActiveCount(): number {\n        let items: (CppBuildConfiguration | undefined)[] = [];\n        if (this.cppManager.getAllActiveConfigs) {\n            items = [...this.cppManager.getAllActiveConfigs().values()].filter(config => !!config);\n        }\n        return items.length;\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { Command, CommandContribution, CommandRegistry, CommandService } from '@theia/core';\nimport { injectable, inject } from 'inversify';\nimport { QuickOpenService } from '@theia/core/lib/browser/quick-open/quick-open-service';\nimport { FileSystem } from '@theia/filesystem/lib/common';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceScope, PreferenceService } from '@theia/preferences/lib/browser';\nimport { CppBuildConfigurationManager, CPP_BUILD_CONFIGURATIONS_PREFERENCE_KEY, isCppBuildConfiguration, equals } from './cpp-build-configurations';\nimport { EditorManager } from '@theia/editor/lib/browser';\nimport { CommonCommands, LabelProvider } from '@theia/core/lib/browser';\nimport { QuickPickService, QuickPickItem } from '@theia/core/lib/common/quick-pick-service';\nimport { WorkspaceService } from '@theia/workspace/lib/browser';\nimport { CppBuildConfiguration } from '../common/cpp-build-configuration-protocol';\n\n@injectable()\nexport class CppBuildConfigurationChanger {\n\n    @inject(CommandService)\n    protected readonly commandService: CommandService;\n\n    @inject(CppBuildConfigurationManager)\n    protected readonly cppBuildConfigurations: CppBuildConfigurationManager;\n\n    @inject(EditorManager)\n    protected readonly editorManager: EditorManager;\n\n    @inject(FileSystem)\n    protected readonly fileSystem: FileSystem;\n\n    @inject(LabelProvider)\n    protected readonly labelProvider: LabelProvider;\n\n    @inject(QuickPickService)\n    protected readonly quickPick: QuickPickService;\n\n    @inject(QuickOpenService)\n    protected readonly quickOpenService: QuickOpenService;\n\n    @inject(PreferenceService)\n    protected readonly preferenceService: PreferenceService;\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    /**\n     * Item used to trigger creation of a new build configuration.\n     */\n    protected readonly createItem: QuickPickItem<'createNew'> = ({\n        label: 'Create New',\n        value: 'createNew',\n        description: 'Create a new build configuration',\n        iconClass: 'fa fa-plus'\n    });\n\n    /**\n     * Item used to trigger reset of the active build configuration.\n     */\n    protected readonly resetItem: QuickPickItem<'reset'> = ({\n        label: 'None',\n        value: 'reset',\n        description: 'Reset the active build configuration',\n        iconClass: 'fa fa-times'\n    });\n\n    /**\n     * Change the build configuration for a given root.\n     * If multiple roots are available, prompt users a first time to select their desired root.\n     * Once a root is determined, prompt users to select an active build configuration if applicable.\n     */\n    async change(): Promise<void> {\n\n        // Prompt users to determine working root.\n        const root = await this.selectWorkspaceRoot();\n        if (!root) {\n            return;\n        }\n\n        // Prompt users to determine action (set active config, reset active config, create new config).\n        const action = await this.selectCppAction(root);\n        if (!action) {\n            return;\n        }\n\n        // Perform desired action.\n        if (action === 'createNew') {\n            this.commandService.executeCommand(CPP_CREATE_NEW_BUILD_CONFIGURATION.id);\n        }\n        if (action === 'reset') {\n            this.cppBuildConfigurations.setActiveConfig(undefined, root);\n        }\n        if (action && isCppBuildConfiguration(action)) {\n            this.cppBuildConfigurations.setActiveConfig(action, root);\n        }\n    }\n\n    /**\n     * Pick a workspace root using the quick open menu.\n     */\n    protected async selectWorkspaceRoot(): Promise<string | undefined> {\n        const roots = this.workspaceService.tryGetRoots();\n        return this.quickPick.show(roots.map(({ uri: root }) => {\n            const active = this.cppBuildConfigurations.getActiveConfig(root);\n            return {\n                // See: WorkspaceUriLabelProviderContribution\n                // It will transform the path to a prettier display (adding a ~, etc).\n                label: this.labelProvider.getName(new URI(root).withScheme('file')),\n                description: active ? active.name : 'undefined',\n                value: root,\n            };\n        }), { placeholder: 'Select workspace root' });\n    }\n\n    /**\n     * Lists the different options for a given root if specified, first else.\n     * In this case, the options are to set/unset/create a build configuration.\n     *\n     * @param root the workspace root.\n     */\n    protected async selectCppAction(root: string | undefined): Promise<string | CppBuildConfiguration | undefined> {\n        const items: QuickPickItem<'createNew' | 'reset' | CppBuildConfiguration>[] = [];\n        // Add the 'Create New' item at all times.\n        items.push(this.createItem);\n        // Add the 'Reset' item if there currently is an active config.\n        if (this.cppBuildConfigurations.getActiveConfig(root)) {\n            items.push(this.resetItem);\n        }\n        // Display all valid configurations for a given root.\n        const configs = this.cppBuildConfigurations.getValidConfigs(root);\n        const active = this.cppBuildConfigurations.getActiveConfig(root);\n        configs.map(config => {\n            items.push({\n                label: config.name,\n                description: config.directory,\n                iconClass: active && equals(config, active) ? 'fa fa-check' : 'fa fa-empty-item',\n                value: {\n                    name: config.name,\n                    directory: config.directory,\n                    commands: config.commands\n                },\n            });\n        });\n        return this.quickPick.show(items, { placeholder: 'Select action' });\n    }\n\n    /** Create a new build configuration with placeholder values.  */\n    async createConfig(): Promise<void> {\n        this.commandService.executeCommand(CommonCommands.OPEN_PREFERENCES.id, PreferenceScope.Workspace);\n        const configs = this.cppBuildConfigurations.getConfigs().slice(0);\n        configs.push({ name: '', directory: '' });\n        await this.preferenceService.set(CPP_BUILD_CONFIGURATIONS_PREFERENCE_KEY, configs, PreferenceScope.Workspace);\n    }\n}\n\nexport const CPP_CATEGORY = 'C/C++';\n\n/**\n * Reset active build configuration if applicable.\n * Set active build configuration to `None`.\n */\nexport const CPP_RESET_BUILD_CONFIGURATION: Command = {\n    id: 'cpp.resetBuildConfiguration',\n    category: CPP_CATEGORY,\n    label: 'Reset Build Configuration'\n};\n\n/**\n * Create a new build configuration, and trigger opening the preferences widget.\n */\nexport const CPP_CREATE_NEW_BUILD_CONFIGURATION: Command = {\n    id: 'cpp.createNewBuildConfiguration',\n    category: CPP_CATEGORY,\n    label: 'Create New Build Configuration'\n};\n\n/**\n * Open the quick open menu to let the user change the active build configuration.\n */\nexport const CPP_CHANGE_BUILD_CONFIGURATION: Command = {\n    id: 'cpp.change-build-configuration',\n    category: CPP_CATEGORY,\n    label: 'Change Build Configuration'\n};\n\n@injectable()\nexport class CppBuildConfigurationsContributions implements CommandContribution {\n\n    @inject(CppBuildConfigurationChanger)\n    protected readonly cppChangeBuildConfiguration: CppBuildConfigurationChanger;\n\n    @inject(CppBuildConfigurationManager)\n    protected readonly cppManager: CppBuildConfigurationManager;\n\n    /**\n     * Register build configurations commands for C/C++.\n     * Available commands include:\n     * - Resetting C/C++ build configurations.\n     * - Creating new C/C++ build configurations.\n     * - Updating C/C++ build configurations.\n     * @param commands the command registry.\n     */\n    registerCommands(commands: CommandRegistry): void {\n        commands.registerCommand(CPP_RESET_BUILD_CONFIGURATION, {\n            isEnabled: () => !!this.cppManager.getActiveConfig(),\n            isVisible: () => !!this.cppManager.getActiveConfig(),\n            execute: () => this.cppManager.setActiveConfig(undefined)\n        });\n        commands.registerCommand(CPP_CREATE_NEW_BUILD_CONFIGURATION, {\n            execute: () => this.cppChangeBuildConfiguration.createConfig()\n        });\n        commands.registerCommand(CPP_CHANGE_BUILD_CONFIGURATION, {\n            execute: () => this.cppChangeBuildConfiguration.change()\n        });\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018-2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject, postConstruct } from 'inversify';\nimport { Emitter, Event } from '@theia/core';\nimport { CppPreferences } from './cpp-preferences';\nimport { StorageService } from '@theia/core/lib/browser/storage-service';\nimport { WorkspaceService } from '@theia/workspace/lib/browser';\nimport { CppBuildConfiguration, CppBuildConfigurationServer } from '../common/cpp-build-configuration-protocol';\nimport { VariableResolverService } from '@theia/variable-resolver/lib/browser';\nimport URI from '@theia/core/lib/common/uri';\nimport { deepClone } from '@theia/core';\n\n/**\n * @deprecated Import from `@theia/cpp/lib/common` instead\n */\nexport { CppBuildConfiguration };\n\n/**\n * Determine if the argument is a C/C++ build configuration.\n *\n * @returns `true` if the argument is a C/C++ build configuration.\n */\n// tslint:disable-next-line:no-any\nexport function isCppBuildConfiguration(arg: any): arg is CppBuildConfiguration {\n    return arg.name !== undefined && arg.directory !== undefined;\n}\n\n/**\n * Determine if two C/C++ build configurations are equal.\n * @param a the first C/C++ build configuration.\n * @param b the second C/C++ build configuration.\n *\n * @returns `true` if both `a` and `b` are equal.\n */\nexport function equals(a: CppBuildConfiguration, b: CppBuildConfiguration): boolean {\n    return (\n        a.name === b.name &&\n        a.directory === b.directory &&\n        a.commands === b.commands\n    );\n}\n\n/**\n * Representation of all saved build configurations per workspace root in local storage.\n */\nclass SavedActiveBuildConfigurations {\n    configs: [string, CppBuildConfiguration | undefined][];\n}\n\nexport const CppBuildConfigurationManager = Symbol('CppBuildConfigurationManager');\n\n/**\n * Representation of a C/C++ build configuration manager.\n */\nexport interface CppBuildConfigurationManager {\n\n    /**\n     * Get the list of defined build configurations.\n     *\n     * @returns an array of defined `CppBuildConfiguration`.\n     */\n    getConfigs(root?: string): CppBuildConfiguration[];\n\n    /**\n     * Get the list of valid defined build configurations.\n     *\n     * @returns an array of valid defined `CppBuildConfiguration`.\n     * A `CppBuildConfiguration` is considered valid if it has a `name` and `directory`.\n     */\n    getValidConfigs(root?: string): CppBuildConfiguration[];\n\n    /**\n     * Get the active build configuration.\n     *\n     * @param root the optional workspace root.\n     * @returns the active `CppBuildConfiguration` if it exists, else `undefined`.\n     */\n    getActiveConfig(root?: string): CppBuildConfiguration | undefined;\n\n    /**\n     * Set the active build configuration.\n     *\n     * @param config the active `CppBuildConfiguration`. If `undefined` no active build configuration will be set.\n     * @param root the optional workspace root.\n     */\n    setActiveConfig(config: CppBuildConfiguration | undefined, root?: string): void;\n\n    /**\n     * Get the active build configurations for all roots.\n     */\n    getAllActiveConfigs?(): Map<string, CppBuildConfiguration | undefined>;\n\n    /**\n     * Experimental:\n     *\n     * Get a filesystem path to a `compile_commands.json` file which will be the result of all\n     * configurations merged together (provided through the `configs` parameter).\n     *\n     * This covers the case when `clangd` is not able to take multiple compilation database\n     * in its initialization, so this is mostly a hack-around to still get diagnostics for all\n     * projects and most importantly being able to cross reference project symbols.\n     */\n    getMergedCompilationDatabase?(configs: { directories: string[] }): Promise<string>;\n\n    /**\n     * @deprecated use `onActiveConfigChange2` instead.\n     *\n     * Event emitted when the active build configuration changes.\n     *\n     * @returns an event with the active `CppBuildConfiguration` if it exists, else `undefined`.\n     */\n    onActiveConfigChange: Event<CppBuildConfiguration | undefined>;\n\n    /**\n     * Updated `onActiveConfigChange` to support multi-root.\n     *\n     * @returns all the configurations to use.\n     */\n    onActiveConfigChange2: Event<Map<string, CppBuildConfiguration>>;\n\n    /**\n     * Promise resolved when the list of build configurations has been read\n     * once, and the active configuration has been set, if relevant.\n     */\n    ready: Promise<void>;\n}\n\nexport const CPP_BUILD_CONFIGURATIONS_PREFERENCE_KEY = 'cpp.buildConfigurations';\n\n/**\n * Entry point to get the list of build configurations and get/set the active\n * build configuration.\n */\n@injectable()\nexport class CppBuildConfigurationManagerImpl implements CppBuildConfigurationManager {\n\n    @inject(CppPreferences)\n    protected readonly cppPreferences: CppPreferences;\n\n    @inject(StorageService)\n    protected readonly storageService: StorageService;\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    @inject(VariableResolverService)\n    protected readonly variableResolver: VariableResolverService;\n\n    @inject(CppBuildConfigurationServer)\n    protected readonly buildConfigurationServer: CppBuildConfigurationServer;\n\n    /**\n     * Resolved configurations, coming from the preferences.\n     */\n    protected resolvedConfigurations = new Map<string, CppBuildConfiguration[]>();\n\n    /**\n     * The current active build configurations map.\n     */\n    protected activeConfigurations = new Map<string, CppBuildConfiguration | undefined>();\n\n    /**\n     * @deprecated use `activeConfigChange2Emitter` instead.\n     *\n     * Emitter for when the active build configuration changes.\n     */\n    protected readonly activeConfigChangeEmitter = new Emitter<CppBuildConfiguration | undefined>();\n\n    /**\n     * Emitter for when an active build configuration changes.\n     */\n    protected readonly activeConfigChange2Emitter = new Emitter<Map<string, CppBuildConfiguration>>();\n\n    /**\n     * Persistent storage key for the active build configurations map.\n     */\n    readonly ACTIVE_BUILD_CONFIGURATIONS_MAP_STORAGE_KEY = 'cpp.active-build-configurations-map';\n\n    public ready: Promise<void>;\n\n    /**\n     * Initialize the manager.\n     */\n    @postConstruct()\n    async init(): Promise<void> {\n        // Try to read the active build config from local storage.\n        this.ready = new Promise(async resolve => {\n            const loadActiveConfigurations = this.loadActiveConfigs();\n            await this.cppPreferences.ready;\n            await Promise.all([\n                this.handlePreferencesUpdate(),\n                loadActiveConfigurations,\n            ]);\n            this.cppPreferences.onPreferenceChanged(() => this.handlePreferencesUpdate());\n            resolve();\n        });\n    }\n\n    /**\n     * Get the C/C++ build configuration from the preferences.\n     * @param root the optional workspace root.\n     *\n     * @returns an array of build configurations.\n     */\n    protected getConfigsFromPreferences(root?: string): CppBuildConfiguration[] {\n        if (root) {\n            return Array.from(this.cppPreferences.get(CPP_BUILD_CONFIGURATIONS_PREFERENCE_KEY, [], root));\n        }\n        return Array.from(this.cppPreferences[CPP_BUILD_CONFIGURATIONS_PREFERENCE_KEY] || []);\n    }\n\n    /**\n     * Load the active build configuration from persistent storage.\n     */\n    protected async loadActiveConfigs(): Promise<void> {\n        const savedConfig = await this.storageService.getData<SavedActiveBuildConfigurations>(\n            this.ACTIVE_BUILD_CONFIGURATIONS_MAP_STORAGE_KEY\n        );\n        if (savedConfig !== undefined) {\n            // read from local storage and update the map.\n            this.activeConfigurations = new Map(savedConfig.configs);\n        }\n    }\n\n    /**\n     * Save the active build configuration to persistent storage.\n     *\n     * @param config the active `CppBuildConfiguration`.\n     */\n    protected saveActiveConfigs(configs: Map<string, CppBuildConfiguration | undefined>): void {\n        this.storageService.setData<SavedActiveBuildConfigurations>(\n            this.ACTIVE_BUILD_CONFIGURATIONS_MAP_STORAGE_KEY, { configs: [...configs.entries()] }\n        );\n    }\n\n    /**\n     * Update the active build configuration if applicable.\n     */\n    protected async handlePreferencesUpdate(): Promise<void> {\n        // tslint:disable:no-any\n        const roots = this.workspaceService.tryGetRoots();\n\n        // Resolve variables for all configurations.\n        await Promise.all(roots.map(async ({ uri: root }) => {\n            const context = new URI(root);\n            const configs = this.getConfigsFromPreferences(root);\n            const resolvedConfigs = configs.map(config => deepClone(config)); // copy\n            await Promise.all(resolvedConfigs.map(async config => Promise.all<any>([\n                this.variableResolver.resolve(config.directory, { context })\n                    .then(resolved => config.directory = resolved),\n                config.commands && Promise.all(Object.keys(config.commands)\n                    .map(command => this.variableResolver.resolve((config.commands as any)[command], { context })\n                        .then(resolved => (config.commands as any)[command] = resolved)\n                    )\n                ),\n            ])));\n            this.resolvedConfigurations.set(root, resolvedConfigs);\n        }));\n\n        // Look for missing active configurations.\n        for (const [root, active] of this.activeConfigurations.entries()) {\n            if (!active) {\n                continue;\n            }\n            const configs = this.getValidConfigs(root);\n            const stillExists = configs.some(config => this.equals(config, active));\n            if (!stillExists) {\n                this.setActiveConfig(undefined, root);\n            }\n        }\n        // tslint:enable:no-any\n    }\n\n    /**\n     * Determine if two `CppBuildConfiguration` are equal.\n     *\n     * @param a `CppBuildConfiguration`.\n     * @param b `CppBuildConfiguration`.\n     */\n    protected equals(a: CppBuildConfiguration, b: CppBuildConfiguration): boolean {\n        return a.name === b.name && a.directory === b.directory;\n    }\n\n    /**\n     * Get the active build configuration.\n     * @param root the optional workspace root.\n     *\n     * @returns the active build configuration if it exists, else `undefined`.\n     */\n    getActiveConfig(root?: string): CppBuildConfiguration | undefined {\n        // Get the active workspace root for the given uri, else for the first workspace root.\n        const workspaceRoot = this.getRoot(root);\n        if (!workspaceRoot) {\n            return undefined;\n        }\n        return this.activeConfigurations.get(workspaceRoot);\n    }\n\n    /**\n     * Get all active build configurations.\n     * - If for a given root the build configuration is `undefined`, the root does not contain\n     * an active build configuration.\n     *\n     * @returns the map of all active configurations if available, for each workspace root.\n     */\n    getAllActiveConfigs(): Map<string, CppBuildConfiguration | undefined> {\n        return this.activeConfigurations;\n    }\n\n    /**\n     * Set the active build configuration.\n     * @param config the build configuration to be set. If `undefined` there will be no active configuration.\n     * @param root the optional workspace root. If unprovided, fallback to the first workspace root if available.\n     */\n    setActiveConfig(config: CppBuildConfiguration | undefined, root?: string): void {\n        // Set the active workspace root for the given uri, else for the first workspace root.\n        const workspaceRoot = this.getRoot(root);\n        if (!workspaceRoot) {\n            return;\n        }\n        this.activeConfigurations.set(workspaceRoot, config);\n        this.saveActiveConfigs(this.activeConfigurations);\n\n        const activeConfigurations = new Map<string, CppBuildConfiguration>();\n        for (const [source, cppConfig] of this.getAllActiveConfigs()) {\n            if (typeof cppConfig !== 'undefined') {\n                activeConfigurations.set(source, cppConfig);\n            }\n        }\n\n        this.activeConfigChange2Emitter.fire(activeConfigurations);\n        this.activeConfigChangeEmitter.fire(config);\n    }\n\n    get onActiveConfigChange(): Event<CppBuildConfiguration | undefined> {\n        return this.activeConfigChangeEmitter.event;\n    }\n\n    get onActiveConfigChange2(): Event<Map<string, CppBuildConfiguration>> {\n        return this.activeConfigChange2Emitter.event;\n    }\n\n    /**\n     * Get all build configurations.\n     * @param root the optional workspace root.\n     *\n     * @returns an array of build configurations.\n     */\n    getConfigs(root?: string): CppBuildConfiguration[] {\n        const workspaceRoot = this.getRoot(root);\n        if (!workspaceRoot) {\n            return [];\n        }\n        let configs = this.resolvedConfigurations.get(workspaceRoot);\n        if (!configs) {\n            this.resolvedConfigurations.set(workspaceRoot, configs = []);\n        }\n        return configs;\n    }\n\n    /**\n     * Get all valid build configurations.\n     * @param root the optional workspace root.\n     *\n     * @returns an array of build configurations.\n     */\n    getValidConfigs(root?: string): CppBuildConfiguration[] {\n        return this.getConfigs(root)\n            .filter(a => a.name !== '' && a.directory !== '')\n            .sort((a, b) => (a.name.localeCompare(b.name)));\n    }\n\n    /**\n     * Get the merged compilation database.\n     */\n    async getMergedCompilationDatabase(params: { directories: string[] }): Promise<string> {\n        // TODO: Optimize by caching the merge result, based on the `CppBuildConfiguration.directory` field?\n        return this.buildConfigurationServer.getMergedCompilationDatabase(params);\n    }\n\n    /**\n     * Get the root directory.\n     * @param root the optional workspace root.\n     *\n     * @returns the root directory if it is present, else `undefined`.\n     */\n    protected getRoot(root?: string): string | undefined {\n        if (root) {\n            return root;\n        }\n        const roots = this.workspaceService.tryGetRoots();\n        if (roots.length > 0) {\n            return roots[0].uri;\n        }\n        return undefined;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from 'inversify';\nimport { SelectionService, UriSelection } from '@theia/core/lib/common';\nimport { CommandContribution, CommandRegistry, Command } from '@theia/core/lib/common';\nimport URI from '@theia/core/lib/common/uri';\nimport { open, OpenerService } from '@theia/core/lib/browser';\nimport { CppLanguageClientContribution } from './cpp-language-client-contribution';\nimport { SwitchSourceHeaderRequest } from './cpp-protocol';\nimport { TextDocumentIdentifier } from '@theia/languages/lib/browser';\nimport { EditorCommands, EditorManager } from '@theia/editor/lib/browser';\nimport { HEADER_AND_SOURCE_FILE_EXTENSIONS } from '../common';\nimport { ExecuteCommandRequest, ExecuteCommandParams } from 'vscode-languageserver-protocol';\nimport { CppPreferences } from './cpp-preferences';\n\n/**\n * The C/C++ command category.\n */\nconst CPP_CATEGORY = 'C/C++';\n\n/**\n * Command to switch between source/header files.\n */\nexport const SWITCH_SOURCE_HEADER: Command = {\n    id: 'switch_source_header',\n    category: CPP_CATEGORY,\n    label: 'Switch Between Source/Header File',\n};\n\n/**\n * Command that is used to show the references from a CodeLens.\n */\nexport const SHOW_CLANGD_REFERENCES: Command = {\n    id: 'clangd.references'\n};\n\n/**\n * Command to dump file inclusions.\n */\nexport const DUMP_INCLUSIONS: Command = {\n    id: 'clangd.dumpinclusions',\n    category: CPP_CATEGORY,\n    label: 'Dump File Inclusions (Debug)',\n};\n\n/**\n * Command to dump files included the active file.\n */\nexport const DUMP_INCLUDED_BY: Command = {\n    id: 'clangd.dumpincludedby',\n    category: CPP_CATEGORY,\n    label: 'Dump Files Including this File (Debug)',\n};\n\n/**\n * Command to re-index the workspace.\n */\nexport const REINDEX: Command = {\n    id: 'clangd.reindex',\n    category: CPP_CATEGORY,\n    label: 'Reindex Workspace (Debug)',\n};\n\n/**\n * Command to print index statistics.\n */\nexport const PRINT_STATS: Command = {\n    id: 'clangd.printstats',\n    category: CPP_CATEGORY,\n    label: 'Print Index Statistics (Debug)',\n};\n\n/**\n * Command to open the file path.\n * @param path the file path.\n */\nexport const FILE_OPEN_PATH = (path: string): Command => <Command>{\n    id: 'file:openPath'\n};\n\n/**\n * Determine if a C/C++ file is currently active (opened).\n * @param editorManager the editor manager if it is defined.\n *\n * @returns `true` if the current active editor is a C/C++ file.\n */\nexport function editorContainsCppFiles(editorManager: EditorManager | undefined): boolean {\n    if (editorManager && editorManager.activeEditor) {\n        const uri = editorManager.activeEditor.editor.document.uri;\n        return HEADER_AND_SOURCE_FILE_EXTENSIONS.some(value => uri.endsWith('.' + value));\n    }\n    return false;\n}\n\n@injectable()\nexport class CppCommandContribution implements CommandContribution {\n\n    @inject(CppPreferences)\n    private readonly cppPreferences: CppPreferences;\n\n    constructor(\n        @inject(CppLanguageClientContribution) protected readonly clientContribution: CppLanguageClientContribution,\n        @inject(OpenerService) protected readonly openerService: OpenerService,\n        @inject(EditorManager) private editorService: EditorManager,\n        protected readonly selectionService: SelectionService\n    ) { }\n\n    /**\n     * Register commands for C/C++.\n     * @param commands the command registry.\n     */\n    registerCommands(commands: CommandRegistry): void {\n        commands.registerCommand(SWITCH_SOURCE_HEADER, {\n            isEnabled: () => editorContainsCppFiles(this.editorService),\n            execute: () => this.switchSourceHeader()\n        });\n        commands.registerCommand(SHOW_CLANGD_REFERENCES, {\n            execute: (doc: TextDocumentIdentifier, pos: Position, locs: Location[]) =>\n                commands.executeCommand(EditorCommands.SHOW_REFERENCES.id, doc.uri, pos, locs)\n        });\n        commands.registerCommand(REINDEX, {\n            isEnabled: () => this.cppPreferences['cpp.experimentalCommands'],\n            execute: () => this.reindex()\n        });\n        commands.registerCommand(DUMP_INCLUSIONS, {\n            isEnabled: () => this.cppPreferences['cpp.experimentalCommands'] && editorContainsCppFiles(this.editorService),\n            execute: () => this.dumpInclusions()\n        });\n        commands.registerCommand(DUMP_INCLUDED_BY, {\n            isEnabled: () => this.cppPreferences['cpp.experimentalCommands'] && editorContainsCppFiles(this.editorService),\n            execute: () => this.dumpIncludedBy()\n        });\n        commands.registerCommand(PRINT_STATS, {\n            isEnabled: () => this.cppPreferences['cpp.experimentalCommands'],\n            execute: () => this.printStats()\n        });\n    }\n\n    /**\n     * Actually switch the source header.\n     */\n    protected async switchSourceHeader(): Promise<void> {\n        const uri = UriSelection.getUri(this.selectionService.selection);\n        if (!uri) {\n            return;\n        }\n        const docIdentifier = TextDocumentIdentifier.create(uri.toString());\n        const languageClient = await this.clientContribution.languageClient;\n        const sourceUri: string | undefined = await languageClient.sendRequest(SwitchSourceHeaderRequest.type, docIdentifier);\n        if (sourceUri !== undefined) {\n            open(this.openerService, new URI(sourceUri.toString()));\n        }\n    }\n\n    /**\n     * Actually dump file inclusions.\n     */\n    private async dumpInclusions(): Promise<void> {\n        const uri = UriSelection.getUri(this.selectionService.selection);\n        if (!uri) {\n            return;\n        }\n        const docIdentifier = TextDocumentIdentifier.create(uri.toString());\n        const params: ExecuteCommandParams = { command: DUMP_INCLUSIONS.id, arguments: [docIdentifier] };\n        const languageClient = await this.clientContribution.languageClient;\n        languageClient.sendRequest(ExecuteCommandRequest.type, params);\n    }\n\n    /**\n     * Actually dump files including the active file.\n     */\n    private async dumpIncludedBy(): Promise<void> {\n        const uri = UriSelection.getUri(this.selectionService.selection);\n        if (!uri) {\n            return;\n        }\n        const docIdentifier = TextDocumentIdentifier.create(uri.toString());\n        const params: ExecuteCommandParams = { command: DUMP_INCLUDED_BY.id, arguments: [docIdentifier] };\n        const languageClient = await this.clientContribution.languageClient;\n        languageClient.sendRequest(ExecuteCommandRequest.type, params);\n    }\n\n    /**\n     * Actually perform re-index.\n     */\n    private async reindex(): Promise<void> {\n        const params: ExecuteCommandParams = { command: REINDEX.id };\n        const languageClient = await this.clientContribution.languageClient;\n        languageClient.sendRequest(ExecuteCommandRequest.type, params);\n    }\n\n    /**\n     * Actually perform print stats.\n     */\n    private async printStats(): Promise<void> {\n        const params: ExecuteCommandParams = { command: PRINT_STATS.id };\n        const languageClient = await this.clientContribution.languageClient;\n        languageClient.sendRequest(ExecuteCommandRequest.type, params);\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { ContainerModule } from 'inversify';\nimport { CommandContribution } from '@theia/core/lib/common';\nimport { KeybindingContribution, KeybindingContext, WebSocketConnectionProvider } from '@theia/core/lib/browser';\nimport { CppCommandContribution } from './cpp-commands';\n\nimport { LanguageClientContribution } from '@theia/languages/lib/browser';\nimport { CppLanguageClientContribution } from './cpp-language-client-contribution';\nimport { CppKeybindingContribution, CppKeybindingContext } from './cpp-keybinding';\nimport { bindCppPreferences } from './cpp-preferences';\nimport { CppBuildConfigurationsContributions, CppBuildConfigurationChanger } from './cpp-build-configurations-ui';\nimport { CppBuildConfigurationManager, CppBuildConfigurationManagerImpl } from './cpp-build-configurations';\nimport { CppBuildConfigurationsStatusBarElement } from './cpp-build-configurations-statusbar-element';\nimport { CppTaskProvider } from './cpp-task-provider';\nimport { TaskContribution } from '@theia/task/lib/browser/task-contribution';\nimport { CppBuildConfigurationServer, cppBuildConfigurationServerPath } from '../common/cpp-build-configuration-protocol';\n\nexport default new ContainerModule(bind => {\n    bind(CommandContribution).to(CppCommandContribution).inSingletonScope();\n    bind(CppKeybindingContext).toSelf().inSingletonScope();\n    bind(KeybindingContext).toService(CppKeybindingContext);\n    bind(KeybindingContribution).to(CppKeybindingContribution).inSingletonScope();\n\n    bind(CppLanguageClientContribution).toSelf().inSingletonScope();\n    bind(LanguageClientContribution).toService(CppLanguageClientContribution);\n\n    bind(CppTaskProvider).toSelf().inSingletonScope();\n    bind(CppBuildConfigurationManager).to(CppBuildConfigurationManagerImpl).inSingletonScope();\n    bind(CppBuildConfigurationChanger).toSelf().inSingletonScope();\n    bind(CppBuildConfigurationsContributions).toSelf().inSingletonScope();\n\n    bind(TaskContribution).toService(CppTaskProvider);\n    bind(CommandContribution).toService(CppBuildConfigurationsContributions);\n\n    bind(CppBuildConfigurationsStatusBarElement).toSelf().inSingletonScope();\n\n    bind(CppBuildConfigurationServer).toDynamicValue(ctx =>\n        WebSocketConnectionProvider.createProxy<CppBuildConfigurationServer>(ctx.container, cppBuildConfigurationServerPath)\n    ).inSingletonScope();\n\n    bindCppPreferences(bind);\n});\n","/********************************************************************************\n * Copyright (C) 2017 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject } from 'inversify';\nimport { isOSX } from '@theia/core/lib/common/os';\nimport { EditorManager } from '@theia/editor/lib/browser';\nimport {\n    KeybindingContext, Keybinding, KeybindingContribution, KeybindingRegistry\n} from '@theia/core/lib/browser';\nimport { editorContainsCppFiles } from './cpp-commands';\n\n@injectable()\nexport class CppKeybindingContext implements KeybindingContext {\n    constructor( @inject(EditorManager) protected readonly editorService: EditorManager) { }\n\n    id = 'cpp.keybinding.context';\n\n    /**\n     * Determine if the keybinding is enabled.\n     * The keybinding is enabled if the editor currently contains an active C/C++ file.\n     * @param arg the keybinding.\n     *\n     * @returns `true` if the keybinding is enabled.\n     */\n    isEnabled(arg: Keybinding): boolean {\n        return editorContainsCppFiles(this.editorService);\n    }\n}\n\n@injectable()\nexport class CppKeybindingContribution implements KeybindingContribution {\n\n    constructor(\n        @inject(CppKeybindingContext) protected readonly cppKeybindingContext: CppKeybindingContext\n    ) { }\n\n    /**\n     * Register keybindings.\n     * @param registry the keybinding registry.\n     */\n    registerKeybindings(registry: KeybindingRegistry): void {\n        [\n            {\n                command: 'switch_source_header',\n                context: this.cppKeybindingContext.id,\n                keybinding: isOSX ? 'option+cmd+o' : 'alt+o'\n            }\n        ].forEach(binding => {\n            registry.registerKeybinding(binding);\n        });\n\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable, postConstruct } from 'inversify';\nimport { MessageConnection } from 'vscode-jsonrpc';\nimport {\n    BaseLanguageClientContribution, LanguageClientFactory,\n    LanguageClientOptions,\n    ILanguageClient\n} from '@theia/languages/lib/browser';\nimport { Languages, Workspace } from '@theia/languages/lib/browser';\nimport { SemanticHighlightingService } from '@theia/editor/lib/browser/semantic-highlight/semantic-highlighting-service';\nimport { ILogger } from '@theia/core/lib/common/logger';\nimport { WindowService } from '@theia/core/lib/browser/window/window-service';\nimport { CPP_LANGUAGE_ID, CPP_LANGUAGE_NAME, HEADER_AND_SOURCE_FILE_EXTENSIONS, CppStartParameters } from '../common';\nimport { CppBuildConfigurationManager } from './cpp-build-configurations';\nimport { CppBuildConfigurationsStatusBarElement } from './cpp-build-configurations-statusbar-element';\nimport { CppBuildConfiguration } from '../common/cpp-build-configuration-protocol';\nimport { CppPreferences } from './cpp-preferences';\nimport URI from '@theia/core/lib/common/uri';\n\n/**\n * Clangd extension to set clangd-specific \"initializationOptions\" in the\n * \"initialize\" request and for the \"workspace/didChangeConfiguration\"\n * notification since the data received is described as 'any' type in LSP.\n */\ninterface ClangdConfigurationParamsChange {\n    /**\n     * The path to the compilation database.\n     */\n    compilationDatabasePath?: string;\n    /**\n     * Representation of a compilation database map.\n     * Experimental field.\n     */\n    compilationDatabaseMap?: Array<{\n        sourceDir: string;\n        dbPath: string;\n    }>;\n}\n\n@injectable()\nexport class CppLanguageClientContribution extends BaseLanguageClientContribution {\n\n    readonly id = CPP_LANGUAGE_ID;\n    readonly name = CPP_LANGUAGE_NAME;\n\n    @inject(CppPreferences)\n    protected readonly cppPreferences: CppPreferences;\n\n    @inject(CppBuildConfigurationManager)\n    protected readonly cppBuildConfigurations: CppBuildConfigurationManager;\n\n    @inject(CppBuildConfigurationsStatusBarElement)\n    protected readonly cppBuildConfigurationsStatusBarElement: CppBuildConfigurationsStatusBarElement;\n\n    @inject(WindowService)\n    protected readonly windowService: WindowService;\n\n    @inject(ILogger)\n    protected readonly logger: ILogger;\n\n    constructor(\n        @inject(Workspace) protected readonly workspace: Workspace,\n        @inject(Languages) protected readonly languages: Languages,\n        @inject(LanguageClientFactory) protected readonly languageClientFactory: LanguageClientFactory,\n        @inject(SemanticHighlightingService) protected readonly semanticHighlightingService: SemanticHighlightingService,\n    ) {\n        super(workspace, languages, languageClientFactory);\n    }\n\n    /**\n     * Initialize the client contribution.\n     */\n    @postConstruct()\n    protected init(): void {\n        this.cppBuildConfigurations.onActiveConfigChange2(() => this.onActiveBuildConfigChanged());\n        this.cppPreferences.onPreferenceChanged(() => this.restart());\n    }\n\n    /**\n     * Handle the language client `onReady` event.\n     * @param languageClient the language client.\n     */\n    protected onReady(languageClient: ILanguageClient): void {\n        super.onReady(languageClient);\n\n        // Display the C/C++ build configurations status bar element to select active build config\n        this.cppBuildConfigurationsStatusBarElement.show();\n    }\n\n    /**\n     * Create a compilation database map.\n     * @param mergeCompilationDatabases flag determining whether to merge the compilation databases.\n     *\n     * @returns the compilation database map.\n     */\n    protected async createCompilationDatabaseMap(mergeCompilationDatabases: boolean): Promise<Map<string, string>> {\n        const activeConfigurations = new Map<string, CppBuildConfiguration>();\n        const databaseMap = new Map<string, string>();\n\n        for (const [source, config] of this.cppBuildConfigurations.getAllActiveConfigs!().entries()) {\n            if (config) {\n                activeConfigurations.set(source, config);\n                databaseMap.set(source, config.directory);\n            }\n        }\n\n        if (activeConfigurations.size > 1 && mergeCompilationDatabases) {\n            databaseMap.clear(); // Use only one configuration.\n            const configs = [...activeConfigurations.values()];\n            try {\n                const mergedDatabaseUri = new URI(await this.cppBuildConfigurations.getMergedCompilationDatabase!({\n                    directories: configs.map(config => config.directory),\n                }));\n                databaseMap.set('undefined', mergedDatabaseUri.parent.path.toString());\n            } catch (error) {\n                this.logger.error(error);\n                databaseMap.set('undefined', configs[0].directory);\n            }\n        }\n\n        return databaseMap;\n    }\n\n    /**\n     * Create the language client.\n     * @param connection the message connection.\n     *\n     * @returns the language client.\n     */\n    protected createLanguageClient(connection: MessageConnection): ILanguageClient {\n        const client: ILanguageClient & Readonly<{ languageId: string }> = Object.assign(super.createLanguageClient(connection), { languageId: this.id });\n        client.registerFeature(SemanticHighlightingService.createNewFeature(this.semanticHighlightingService, client));\n        return client;\n    }\n\n    /**\n     * Update the language initialization options.\n     */\n    private async updateInitializationOptions(): Promise<void> {\n        const clangdParams: ClangdConfigurationParamsChange = {};\n        const experimentalCompilationDatabaseMap = this.cppPreferences['cpp.experimentalCompilationDatabaseMap'];\n        const databaseMap = await this.createCompilationDatabaseMap(!experimentalCompilationDatabaseMap);\n\n        if (databaseMap.size === 1) {\n            clangdParams.compilationDatabasePath = [...databaseMap.values()][0];\n        } else if (databaseMap.size > 1 && experimentalCompilationDatabaseMap) {\n            clangdParams.compilationDatabaseMap = [...databaseMap.entries()].map(\n                ([sourceDir, dbPath]) => ({ sourceDir: new URI(sourceDir).path.toString(), dbPath, }));\n        }\n\n        const lc = await this.languageClient;\n        lc.clientOptions.initializationOptions = clangdParams;\n    }\n\n    /**\n     * Handle the `activeBuildConfigChanged` event.\n     */\n    protected onActiveBuildConfigChanged(): void {\n        this.restart();\n    }\n\n    protected get documentSelector(): string[] {\n        // This is used (at least) to determine which files, when they are open,\n        // trigger the launch of the C/C++ language server.\n        return HEADER_AND_SOURCE_FILE_EXTENSIONS;\n    }\n\n    protected get globPatterns(): string[] {\n        // This is used (at least) to determine which files we watch.  Change\n        // notifications are forwarded to the language server.\n        return [\n            '**/*.{' + HEADER_AND_SOURCE_FILE_EXTENSIONS.join() + '}',\n            '**/compile_commands.json',\n        ];\n    }\n\n    protected get configurationSection(): string[] {\n        return [this.id];\n    }\n\n    /**\n     * Create the language client options.\n     *\n     * @returns the language client options.\n     */\n    protected createOptions(): LanguageClientOptions {\n        const clientOptions = super.createOptions();\n        clientOptions.initializationFailedHandler = () => {\n            const READ_INSTRUCTIONS_ACTION = 'Read Instructions';\n            const ERROR_MESSAGE = 'Error starting C/C++ language server. ' +\n                \"Please make sure 'clangd' is installed on your system. \" +\n                'You can refer to the clangd page for instructions.';\n            this.messageService.error(ERROR_MESSAGE, READ_INSTRUCTIONS_ACTION).then(selected => {\n                if (READ_INSTRUCTIONS_ACTION === selected) {\n                    this.windowService.openNewWindow('https://clang.llvm.org/extra/clangd.html', { external: true });\n                }\n            });\n            this.logger.error(ERROR_MESSAGE);\n            return false;\n        };\n        return clientOptions;\n    }\n\n    /**\n     * Get the language start options.\n     *\n     * @returns a promise resolving to the `CppStartParameters`.\n     */\n    protected async getStartParameters(): Promise<CppStartParameters> {\n\n        // getStartParameters is one of the only async steps in the LC\n        // initialization sequence, so we will update asynchronously the\n        // options here\n        await this.updateInitializationOptions();\n\n        return {\n            clangdExecutable: this.cppPreferences['cpp.clangdExecutable'],\n            clangdArgs: this.cppPreferences['cpp.clangdArgs'],\n            clangTidy: this.cppPreferences['cpp.clangTidy'],\n            clangTidyChecks: this.cppPreferences['cpp.clangTidyChecks']\n        };\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { interfaces } from 'inversify';\nimport { PreferenceSchema, PreferenceProxy, PreferenceService, createPreferenceProxy, PreferenceContribution } from '@theia/core/lib/browser/preferences';\nimport { CppBuildConfiguration } from '../common/cpp-build-configuration-protocol';\nimport { CLANGD_EXECUTABLE_DEFAULT } from '../common';\n\n/**\n * Representation of the C/C++ preference schema.\n */\nexport const cppPreferencesSchema: PreferenceSchema = {\n    type: 'object',\n    properties: {\n        'cpp.buildConfigurations': {\n            description: 'List of build configurations',\n            type: 'array',\n            items: {\n                type: 'object',\n                properties: {\n                    'name': {\n                        type: 'string'\n                    },\n                    'directory': {\n                        type: 'string'\n                    },\n                    'commands': {\n                        type: 'object',\n                        properties: {\n                            'build': {\n                                type: 'string',\n                            }\n                        },\n                    }\n                },\n                required: ['name', 'directory'],\n            },\n            scope: 'resource',\n            default: [],\n        },\n        'cpp.experimentalCompilationDatabaseMap': {\n            description: 'Enable experimental support for multiple compilation databases.',\n            default: false,\n            type: 'boolean'\n        },\n        'cpp.experimentalCommands': {\n            description: 'Enable experimental commands mostly intended for Clangd developers.',\n            default: false,\n            type: 'boolean'\n        },\n        'cpp.clangdExecutable': {\n            description: 'Specify the executable name/path to run in order to start clangd.',\n            default: CLANGD_EXECUTABLE_DEFAULT,\n            type: 'string'\n        },\n        'cpp.clangdArgs': {\n            description: 'Specify the arguments to pass to clangd when starting the language server.',\n            default: '',\n            type: 'string'\n        },\n        'cpp.clangTidy': {\n            description: 'Enable/disable C/C++ linting.',\n            default: false,\n            type: 'boolean'\n        },\n        'cpp.clangTidyChecks': {\n            description: 'Specify comma separated arguments to pass to clang-tidy. Activated only if cpp.clang-tidy is enabled',\n            default: '',\n            type: 'string'\n        }\n    }\n};\n\n/**\n * Representation of C/C++ preference configuration.\n */\nexport class CppConfiguration {\n    'cpp.buildConfigurations': CppBuildConfiguration[];\n    'cpp.experimentalCompilationDatabaseMap': boolean;\n    'cpp.experimentalCommands': boolean;\n    'cpp.clangdExecutable': string;\n    'cpp.clangdArgs': string;\n    'cpp.clangTidy': boolean;\n    'cpp.clangTidyChecks': string;\n}\n\nexport const CppPreferences = Symbol('CppPreferences');\nexport type CppPreferences = PreferenceProxy<CppConfiguration>;\n\n/**\n * Create the C/C++ preferences.\n * @param preferences the preference service.\n *\n * @returns the C/C++ preferences.\n */\nexport function createCppPreferences(preferences: PreferenceService): CppPreferences {\n    return createPreferenceProxy(preferences, cppPreferencesSchema);\n}\n\n/**\n * Bind the C/C++ preferences to the application.\n */\nexport function bindCppPreferences(bind: interfaces.Bind): void {\n    bind(CppPreferences).toDynamicValue(ctx => {\n        const preferences = ctx.container.get<PreferenceService>(PreferenceService);\n        return createCppPreferences(preferences);\n    }).inSingletonScope();\n\n    bind(PreferenceContribution).toConstantValue({ schema: cppPreferencesSchema });\n}\n","/********************************************************************************\n * Copyright (C) 2017-2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { RequestType, TextDocumentIdentifier } from '@theia/languages/lib/browser';\n\nexport namespace SwitchSourceHeaderRequest {\n    export const type = new RequestType<TextDocumentIdentifier, string | undefined, void, void>('textDocument/switchSourceHeader');\n}\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport parseArgv = require('string-argv');\nimport { inject, injectable, postConstruct } from 'inversify';\nimport { ProcessTaskConfiguration } from '@theia/task/lib/common/process/task-protocol';\nimport { TaskContribution, TaskProvider, TaskProviderRegistry, TaskResolver, TaskResolverRegistry } from '@theia/task/lib/browser/task-contribution';\nimport { CppBuildConfiguration } from '../common/cpp-build-configuration-protocol';\nimport { CppBuildConfigurationManager } from './cpp-build-configurations';\nimport { ContributedTaskConfiguration, TaskConfiguration } from '@theia/task/lib/common/task-protocol';\nimport { TaskDefinitionRegistry } from '@theia/task/lib/browser/task-definition-registry';\nimport { ProblemMatcherRegistry } from '@theia/task/lib/browser/task-problem-matcher-registry';\nimport { ProblemPatternRegistry } from '@theia/task/lib/browser/task-problem-pattern-registry';\n\n/**\n * Representation of a C/C++ build task configuration.\n * Describes the data required to define a C/C++ build task the user could run.\n */\ninterface CppBuildTaskConfiguration extends ContributedTaskConfiguration {\n    /**\n     * The C/C++ build configuration.\n     */\n    config: CppBuildConfiguration;\n}\n\n/**\n * The C/C++ build task type key.\n */\nconst CPP_BUILD_TASK_TYPE_KEY: string = 'cpp.build';\n/**\n * The C/C++ build task source.\n */\nconst CPP_BUILD_TASK_SOURCE: string = 'cpp';\n\n@injectable()\nexport class CppTaskProvider implements TaskContribution, TaskProvider, TaskResolver {\n\n    @inject(TaskResolverRegistry) protected readonly taskResolverRegistry: TaskResolverRegistry;\n    @inject(TaskDefinitionRegistry) protected readonly taskDefinitionRegistry: TaskDefinitionRegistry;\n    @inject(CppBuildConfigurationManager) protected readonly cppBuildConfigurationManager: CppBuildConfigurationManager;\n    @inject(ProblemMatcherRegistry) protected readonly problemMatcherRegistry: ProblemMatcherRegistry;\n    @inject(ProblemPatternRegistry) protected readonly problemPatternRegistry: ProblemPatternRegistry;\n\n    /**\n     * Initialize the task provider.\n     */\n    @postConstruct()\n    protected init(): void {\n        this.registerTaskDefinition();\n        this.problemPatternRegistry.register({\n            'name': 'clangTidyPattern',\n            'regexp': '^(.+):(\\\\d+):(\\\\d+):\\\\s+(error|warning|info|note):\\\\s+(.+?)\\\\s+\\\\[(.+)\\\\]$',\n            'file': 1,\n            'line': 2,\n            'character': 3,\n            'severity': 4,\n            'message': 5,\n            'code': 6\n        });\n        this.problemMatcherRegistry.register({\n            'name': 'clangTidyMatcher',\n            'label': 'Clang-tidy problems',\n            'owner': 'clang-tidy',\n            'source': 'clang-tidy-task',\n            'applyTo': 'alldocuments',\n            'fileLocation': [\n                'absolute'\n            ],\n            'pattern': 'clangTidyPattern'\n        });\n    }\n\n    /**\n     * Register the task provider.\n     * @param registry the task provider registry.\n     */\n    registerProviders(registry: TaskProviderRegistry): void {\n        registry.register(CPP_BUILD_TASK_SOURCE, this);\n    }\n\n    /**\n     * Register the task resolver.\n     * @param registry the task resolver registry.\n     */\n    registerResolvers(registry: TaskResolverRegistry): void {\n        registry.register(CPP_BUILD_TASK_TYPE_KEY, this);\n    }\n\n    /**\n     * Resolve the C/C++ build task configuration.\n     * @param task the C/C++ build task configuration.\n     *\n     * @returns a Promise resolving to the task configuration.\n     */\n    async resolveTask(task: CppBuildTaskConfiguration): Promise<TaskConfiguration> {\n        const resolver = await this.taskResolverRegistry.getResolver('shell');\n        if (!resolver) {\n            throw new Error('No shell resolver found, cannot build.');\n        }\n\n        const buildCommand = task.config.commands && task.config.commands['build'];\n        if (buildCommand === undefined) {\n            throw new Error(`No build command defined in build configuration ${task.config.name}.`);\n        }\n\n        // FIXME: the task API should allow to run commands through the shell.\n        // In the mean time, we split the arguments ourselves.\n        const argv: string[] = parseArgv(buildCommand);\n        if (argv.length === 0) {\n            throw new Error(`Empty build command in the active build configuration (${task.config.name})`);\n        }\n        const command: string = argv[0];\n        const args: string[] = argv.slice(1);\n\n        const resolvedTask: ProcessTaskConfiguration = {\n            ...task,\n            type: 'shell',\n            command,\n            args,\n            options: {\n                cwd: task.config.directory,\n            }\n        };\n        return resolver.resolveTask(resolvedTask);\n    }\n\n    /**\n     * Return a C/C++ build task configuration based on `config`, or undefined\n     * if `config` doesn't specify a build command.\n     */\n    makeTaskConfiguration(config: CppBuildConfiguration): CppBuildTaskConfiguration | undefined {\n        if (config.commands && config.commands.build) {\n            return {\n                type: CPP_BUILD_TASK_TYPE_KEY,\n                _source: CPP_BUILD_TASK_SOURCE,\n                _scope: config.directory,\n                label: `C/C++ Build - ${config.name}`,\n                config\n            };\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Return the C/C++ build tasks (one task per existing build config).\n     */\n    async provideTasks(): Promise<CppBuildTaskConfiguration[]> {\n        const buildConfigs = this.cppBuildConfigurationManager.getConfigs();\n        const taskConfigs: CppBuildTaskConfiguration[] = [];\n        for (const buildConfig of buildConfigs) {\n            const taskConfig = this.makeTaskConfiguration(buildConfig);\n            if (taskConfig) {\n                taskConfigs.push(taskConfig);\n            }\n        }\n\n        return taskConfigs;\n    }\n\n    /**\n     * Register the task definition.\n     */\n    private registerTaskDefinition(): void {\n        this.taskDefinitionRegistry.register({\n            taskType: CPP_BUILD_TASK_TYPE_KEY,\n            source: 'cpp',\n            properties: {\n                required: ['label'],\n                all: ['label'],\n                schema: {\n                    type: CPP_BUILD_TASK_TYPE_KEY,\n                    required: ['label'],\n                    properties: {\n                        label: {\n                            type: 'string'\n                        }\n                    }\n                }\n            }\n        });\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable } from 'inversify';\n\nexport const cppBuildConfigurationServerPath = '/services/cppbuildconfigurationserver';\n\n/**\n * Representation of a cpp build configuration.\n */\nexport interface CppBuildConfiguration {\n\n    /**\n     * The human-readable build configuration name.\n     */\n    name: string;\n\n    /**\n     * The base directory of the build configuration.\n     */\n    directory: string;\n\n    /**\n     * The list of commands for the build configuration.\n     */\n    commands?: {\n        'build'?: string\n    };\n}\n\nexport const CppBuildConfigurationServer = Symbol('CppBuildConfigurationServer');\n/**\n * A `CppBuildConfigurationServer` is meant to do heavy disk operations on the\n * project's filesystem, such as merging multiple compilation databases together.\n */\nexport interface CppBuildConfigurationServer {\n\n    /**\n     * Compilation databases get fairly big fairly quickly, so we want to\n     * offload this to the backend server somehow. Could be optimized by using\n     * sub-processing or anything else that would avoid stalling the application.\n     *\n     * @param params.configurations The list of configs to merge together.\n     */\n    getMergedCompilationDatabase(params: { directories: string[] }): Promise<string>;\n\n}\n\n@injectable()\nexport class MockCppBuildConfigurationServer implements CppBuildConfigurationServer {\n    constructor() { }\n    /**\n     * Dispose the configuration server.\n     */\n    dispose(): void { }\n    /**\n     * Get the merged compilation database.\n     * @param params the passed arguments including the list of directories to search from.\n     */\n    getMergedCompilationDatabase(params: { directories: string[] }): Promise<string> {\n        return Promise.resolve('');\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/**\n * The C language ID.\n */\nexport const C_LANGUAGE_ID = 'c';\n/**\n * The C++ language ID.\n */\nexport const CPP_LANGUAGE_ID = 'cpp';\n/**\n * The human-readable name for the C/C++ language server.\n */\nexport const CPP_LANGUAGE_NAME = 'C/C++';\n\n// These should become preferences eventually and be forwarded to the server.\n\n/**\n * The C/C++ header file extensions.\n */\nexport const HEADER_FILE_EXTENSIONS = ['h', 'hxx', 'hh', 'hpp', 'inc'];\n/**\n * The C/C++ source file extensions.\n */\nexport const SOURCE_FILE_EXTENSIONS = ['c', 'cxx', 'C', 'c++', 'cc', 'cpp', 'cl'];\n/**\n * The list of file extensions important to the C/C++ language server.\n */\nexport const HEADER_AND_SOURCE_FILE_EXTENSIONS = SOURCE_FILE_EXTENSIONS.concat(HEADER_FILE_EXTENSIONS);\n\nexport const CLANGD_EXECUTABLE_DEFAULT = 'clangd';\n\n/**\n * Representation of the C/C++ start parameters.\n */\nexport interface CppStartParameters {\n    /**\n     * The path to the clangd executable.\n     */\n    clangdExecutable: string;\n    /**\n     * The clangd command line arguments.\n     */\n    clangdArgs: string;\n    /**\n     * Determines whether to turn on clang-tidy linting.\n     */\n    clangTidy?: boolean;\n    /**\n     * The list of clang-tidy checks to take into consideration.\n     */\n    clangTidyChecks?: string;\n}\n","\"use strict\";\n\nmodule.exports = parseArgsStringToArgv;\nmodule.exports.parseArgsStringToArgv = parseArgsStringToArgv;\n\nfunction parseArgsStringToArgv(value, env, file) {\n  // ([^\\s'\"]+(['\"])([^\\2]*?)\\2) Match `text\"quotes text\"`\n\n  // [^\\s'\"] or Match if not a space ' or \"\n\n  // (['\"])([^\\4]*?)\\4 or Match \"quoted text\" without quotes\n  // `\\2` and `\\4` are a backreference to the quote style (' or \") captured\n  var myRegexp = /([^\\s'\"]+(['\"])([^\\2]*?)\\2)|[^\\s'\"]+|(['\"])([^\\4]*?)\\4/gi;\n  var myString = value;\n  var myArray = [\n  ];\n  if (env) {\n    myArray.push(env);\n  }\n  if (file) {\n    myArray.push(file);\n  }\n  var match;\n  do {\n        // Each call to exec returns the next regex match as an array\n    match = myRegexp.exec(myString);\n    if (match !== null) {\n      // Index 1 in the array is the captured group if it exists\n      // Index 0 is the matched text, which we use if no captured group exists\n      myArray.push(firstString(match[1], match[5], match[0]));\n    }\n  } while (match !== null);\n\n  return myArray;\n}\n\n// Accepts any number of arguments, and returns the first one that is a string\n// (even an empty string)\nfunction firstString() {\n  for (var i = 0; i < arguments.length; i++) {\n    var arg = arguments[i];\n    if (typeof arg === \"string\") {\n      return arg;\n    }\n  }\n}\n"],"sourceRoot":""}