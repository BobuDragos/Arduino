{"version":3,"sources":["webpack:///./node_modules/@theia/monaco/src/browser/monaco-snippet-suggest-provider.ts"],"names":[],"mappings":"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","file":"32.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as jsoncparser from 'jsonc-parser';\nimport { injectable, inject } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { Disposable, DisposableCollection } from '@theia/core/lib/common/disposable';\nimport { FileSystem, FileSystemError } from '@theia/filesystem/lib/common';\nimport { CompletionTriggerKind } from '@theia/languages/lib/browser';\n\n@injectable()\nexport class MonacoSnippetSuggestProvider implements monaco.languages.CompletionItemProvider {\n\n    private static readonly _maxPrefix = 10000;\n\n    @inject(FileSystem)\n    protected readonly filesystem: FileSystem;\n\n    protected readonly snippets = new Map<string, Snippet[]>();\n    protected readonly pendingSnippets = new Map<string, Promise<void>[]>();\n\n    async provideCompletionItems(model: monaco.editor.ITextModel, position: monaco.Position,\n        context: monaco.languages.CompletionContext): Promise<monaco.languages.CompletionList | undefined> {\n\n        // copied and modified from https://github.com/microsoft/vscode/blob/master/src/vs/workbench/contrib/snippets/browser/snippetCompletionProvider.ts\n        if (position.column >= MonacoSnippetSuggestProvider._maxPrefix) {\n            return undefined;\n        }\n\n        if (context.triggerKind === CompletionTriggerKind.TriggerCharacter && context.triggerCharacter === ' ') {\n            // no snippets when suggestions have been triggered by space\n            return undefined;\n        }\n\n        const languageId = model.getModeId(); // TODO: look up a language id at the position\n        await this.loadSnippets(languageId);\n        const snippetsForLanguage = this.snippets.get(languageId) || [];\n\n        let suggestions: MonacoSnippetSuggestion[];\n        const pos = { lineNumber: position.lineNumber, column: 1 };\n        const lineOffsets: number[] = [];\n        const linePrefixLow = model.getLineContent(position.lineNumber).substr(0, position.column - 1).toLowerCase();\n        const endsInWhitespace = linePrefixLow.match(/\\s$/);\n\n        while (pos.column < position.column) {\n            const word = model.getWordAtPosition(pos);\n            if (word) {\n                // at a word\n                lineOffsets.push(word.startColumn - 1);\n                pos.column = word.endColumn + 1;\n                if (word.endColumn - 1 < linePrefixLow.length && !/\\s/.test(linePrefixLow[word.endColumn - 1])) {\n                    lineOffsets.push(word.endColumn - 1);\n                }\n            } else if (!/\\s/.test(linePrefixLow[pos.column - 1])) {\n                // at a none-whitespace character\n                lineOffsets.push(pos.column - 1);\n                pos.column += 1;\n            } else {\n                // always advance!\n                pos.column += 1;\n            }\n        }\n\n        const availableSnippets = new Set<Snippet>();\n        snippetsForLanguage.forEach(availableSnippets.add, availableSnippets);\n        suggestions = [];\n        for (const start of lineOffsets) {\n            availableSnippets.forEach(snippet => {\n                if (this.isPatternInWord(linePrefixLow, start, linePrefixLow.length, snippet.prefix.toLowerCase(), 0, snippet.prefix.length)) {\n                    suggestions.push(new MonacoSnippetSuggestion(snippet, monaco.Range.fromPositions(position.delta(0, -(linePrefixLow.length - start)), position)));\n                    availableSnippets.delete(snippet);\n                }\n            });\n        }\n        if (endsInWhitespace || lineOffsets.length === 0) {\n            // add remaing snippets when the current prefix ends in whitespace or when no\n            // interesting positions have been found\n            availableSnippets.forEach(snippet => {\n                suggestions.push(new MonacoSnippetSuggestion(snippet, monaco.Range.fromPositions(position)));\n            });\n        }\n\n        // dismbiguate suggestions with same labels\n        suggestions.sort(MonacoSnippetSuggestion.compareByLabel);\n        return { suggestions };\n    }\n\n    resolveCompletionItem(textModel: monaco.editor.ITextModel, position: monaco.Position, item: monaco.languages.CompletionItem): monaco.languages.CompletionItem {\n        return item instanceof MonacoSnippetSuggestion ? item.resolve() : item;\n    }\n\n    protected async loadSnippets(scope: string): Promise<void> {\n        const pending: Promise<void>[] = [];\n        pending.push(...(this.pendingSnippets.get(scope) || []));\n        pending.push(...(this.pendingSnippets.get('*') || []));\n        if (pending.length) {\n            await Promise.all(pending);\n        }\n    }\n\n    fromURI(uri: string | URI, options: SnippetLoadOptions): Disposable {\n        const toDispose = new DisposableCollection(Disposable.create(() => { /* mark as not disposed */ }));\n        const pending = this.loadURI(uri, options, toDispose);\n        const { language } = options;\n        const scopes = Array.isArray(language) ? language : !!language ? [language] : ['*'];\n        for (const scope of scopes) {\n            const pendingSnippets = this.pendingSnippets.get(scope) || [];\n            pendingSnippets.push(pending);\n            this.pendingSnippets.set(scope, pendingSnippets);\n            toDispose.push(Disposable.create(() => {\n                const index = pendingSnippets.indexOf(pending);\n                if (index !== -1) {\n                    pendingSnippets.splice(index, 1);\n                }\n            }));\n        }\n        return toDispose;\n    }\n\n    /**\n     * should NOT throw to prevent load erros on suggest\n     */\n    protected async loadURI(uri: string | URI, options: SnippetLoadOptions, toDispose: DisposableCollection): Promise<void> {\n        try {\n            const { content } = await this.filesystem.resolveContent(uri.toString(), { encoding: 'utf-8' });\n            if (toDispose.disposed) {\n                return;\n            }\n            const snippets = content && jsoncparser.parse(content, undefined, { disallowComments: false });\n            toDispose.push(this.fromJSON(snippets, options));\n        } catch (e) {\n            if (!FileSystemError.FileNotFound.is(e) && !FileSystemError.FileIsDirectory.is(e)) {\n                console.error(e);\n            }\n        }\n    }\n\n    fromJSON(snippets: JsonSerializedSnippets | undefined, { language, source }: SnippetLoadOptions): Disposable {\n        const toDispose = new DisposableCollection();\n        this.parseSnippets(snippets, (name, snippet) => {\n            let { prefix, body, description } = snippet;\n            if (Array.isArray(body)) {\n                body = body.join('\\n');\n            }\n            if (typeof prefix !== 'string' || typeof body !== 'string') {\n                return;\n            }\n            const scopes: string[] = [];\n            if (language) {\n                if (Array.isArray(language)) {\n                    scopes.push(...language);\n                } else {\n                    scopes.push(language);\n                }\n            } else if (typeof snippet.scope === 'string') {\n                for (const rawScope of snippet.scope.split(',')) {\n                    const scope = rawScope.trim();\n                    if (scope) {\n                        scopes.push(scope);\n                    }\n                }\n            }\n            toDispose.push(this.push({\n                scopes,\n                name,\n                prefix,\n                description,\n                body,\n                source\n            }));\n        });\n        return toDispose;\n    }\n    protected parseSnippets(snippets: JsonSerializedSnippets | undefined, accept: (name: string, snippet: JsonSerializedSnippet) => void): void {\n        if (typeof snippets === 'object') {\n            // tslint:disable-next-line:forin\n            for (const name in snippets) {\n                const scopeOrTemplate = snippets[name];\n                if (JsonSerializedSnippet.is(scopeOrTemplate)) {\n                    accept(name, scopeOrTemplate);\n                } else {\n                    this.parseSnippets(scopeOrTemplate, accept);\n                }\n            }\n        }\n    }\n\n    push(...snippets: Snippet[]): Disposable {\n        const toDispose = new DisposableCollection();\n        for (const snippet of snippets) {\n            for (const scope of snippet.scopes) {\n                const languageSnippets = this.snippets.get(scope) || [];\n                languageSnippets.push(snippet);\n                this.snippets.set(scope, languageSnippets);\n                toDispose.push(Disposable.create(() => {\n                    const index = languageSnippets.indexOf(snippet);\n                    if (index !== -1) {\n                        languageSnippets.splice(index, 1);\n                    }\n                }));\n            }\n        }\n        return toDispose;\n    }\n\n    protected isPatternInWord(patternLow: string, patternPos: number, patternLen: number, wordLow: string, wordPos: number, wordLen: number): boolean {\n        while (patternPos < patternLen && wordPos < wordLen) {\n            if (patternLow[patternPos] === wordLow[wordPos]) {\n                patternPos += 1;\n            }\n            wordPos += 1;\n        }\n        return patternPos === patternLen; // pattern must be exhausted\n    }\n\n}\n\nexport interface SnippetLoadOptions {\n    language?: string | string[]\n    source: string\n}\n\nexport interface JsonSerializedSnippets {\n    [name: string]: JsonSerializedSnippet | { [name: string]: JsonSerializedSnippet };\n}\nexport interface JsonSerializedSnippet {\n    body: string | string[];\n    scope: string;\n    prefix: string;\n    description: string;\n}\nexport namespace JsonSerializedSnippet {\n    export function is(obj: Object | undefined): obj is JsonSerializedSnippet {\n        return typeof obj === 'object' && 'body' in obj && 'prefix' in obj;\n    }\n}\n\nexport interface Snippet {\n    readonly scopes: string[]\n    readonly name: string\n    readonly prefix: string\n    readonly description: string\n    readonly body: string\n    readonly source: string\n}\n\nexport class MonacoSnippetSuggestion implements monaco.languages.CompletionItem {\n\n    readonly label: string;\n    readonly detail: string;\n    readonly sortText: string;\n    readonly noAutoAccept = true;\n    readonly kind = monaco.languages.CompletionItemKind.Snippet;\n    readonly insertTextRules = monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet;\n\n    insertText: string;\n    documentation?: monaco.IMarkdownString;\n\n    constructor(\n        protected readonly snippet: Snippet,\n        readonly range: monaco.Range\n    ) {\n        this.label = snippet.prefix;\n        this.detail = `${snippet.description || snippet.name} (${snippet.source})`;\n        this.insertText = snippet.body;\n        this.sortText = `z-${snippet.prefix}`;\n        this.range = range;\n    }\n\n    protected resolved = false;\n    resolve(): MonacoSnippetSuggestion {\n        if (!this.resolved) {\n            const codeSnippet = new monaco.snippetParser.SnippetParser().parse(this.snippet.body).toString();\n            this.documentation = { value: '```\\n' + codeSnippet + '```' };\n            this.resolved = true;\n        }\n        return this;\n    }\n\n    static compareByLabel(a: MonacoSnippetSuggestion, b: MonacoSnippetSuggestion): number {\n        return a.label > b.label ? 1 : a.label < b.label ? -1 : 0;\n    }\n\n}\n"],"sourceRoot":""}