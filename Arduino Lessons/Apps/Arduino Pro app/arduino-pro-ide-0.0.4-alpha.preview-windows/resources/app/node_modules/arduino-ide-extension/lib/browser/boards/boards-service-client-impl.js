"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var event_1 = require("@theia/core/lib/common/event");
var logger_1 = require("@theia/core/lib/common/logger");
var message_service_1 = require("@theia/core/lib/common/message-service");
var storage_service_1 = require("@theia/core/lib/browser/storage-service");
var boards_service_1 = require("../../common/protocol/boards-service");
var BoardsServiceClientImpl = /** @class */ (function () {
    function BoardsServiceClientImpl() {
        this.onBoardInstalledEmitter = new event_1.Emitter();
        this.onBoardUninstalledEmitter = new event_1.Emitter();
        this.onAttachedBoardsChangedEmitter = new event_1.Emitter();
        this.onSelectedBoardsConfigChangedEmitter = new event_1.Emitter();
        /**
         * Used for the auto-reconnecting. Sometimes, the attached board gets disconnected after uploading something to it.
         * It happens with certain boards on Windows. For example, the `MKR1000` boards is selected on post `COM5` on Windows,
         * perform an upload, the board automatically disconnects and reconnects, but on another port, `COM10`.
         * We have to listen on such changes and auto-reconnect the same board on another port.
         * See: https://arduino.slack.com/archives/CJJHJCJSJ/p1568645417013000?thread_ts=1568640504.009400&cid=CJJHJCJSJ
         */
        this.latestValidBoardsConfig = undefined;
        this._boardsConfig = {};
        this.onBoardsChanged = this.onAttachedBoardsChangedEmitter.event;
        this.onBoardInstalled = this.onBoardInstalledEmitter.event;
        this.onBoardUninstalled = this.onBoardUninstalledEmitter.event;
        this.onBoardsConfigChanged = this.onSelectedBoardsConfigChangedEmitter.event;
    }
    BoardsServiceClientImpl.prototype.onStart = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.loadState()];
            });
        });
    };
    BoardsServiceClientImpl.prototype.notifyAttachedBoardsChanged = function (event) {
        this.logger.info('Attached boards and available ports changed: ', JSON.stringify(event));
        var _a = boards_service_1.AttachedBoardsChangeEvent.diff(event), detached = _a.detached, attached = _a.attached;
        var _b = this.boardsConfig, selectedPort = _b.selectedPort, selectedBoard = _b.selectedBoard;
        this.onAttachedBoardsChangedEmitter.fire(event);
        // Dynamically unset the port if is not available anymore. A port can be "detached" when removing a board.
        if (detached.ports.some(function (port) { return boards_service_1.Port.equals(selectedPort, port); })) {
            this.boardsConfig = {
                selectedBoard: selectedBoard,
                selectedPort: undefined
            };
        }
        // Try to reconnect.
        this.tryReconnect(attached.boards, attached.ports);
    };
    BoardsServiceClientImpl.prototype.tryReconnect = function (attachedBoards, availablePorts) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, board, _loop_1, this_1, _c, _d, board, state_1;
            var e_1, _e, e_2, _f;
            return __generator(this, function (_g) {
                if (this.latestValidBoardsConfig && !this.canUploadTo(this.boardsConfig)) {
                    try {
                        for (_a = __values(attachedBoards.filter(boards_service_1.AttachedSerialBoard.is)), _b = _a.next(); !_b.done; _b = _a.next()) {
                            board = _b.value;
                            if (this.latestValidBoardsConfig.selectedBoard.fqbn === board.fqbn
                                && this.latestValidBoardsConfig.selectedBoard.name === board.name
                                && boards_service_1.Port.sameAs(this.latestValidBoardsConfig.selectedPort, board.port)) {
                                this.boardsConfig = this.latestValidBoardsConfig;
                                return [2 /*return*/, true];
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    _loop_1 = function (board) {
                        if (this_1.latestValidBoardsConfig.selectedBoard.fqbn === board.fqbn
                            && this_1.latestValidBoardsConfig.selectedBoard.name === board.name) {
                            this_1.boardsConfig = __assign({}, this_1.latestValidBoardsConfig, { selectedPort: availablePorts.find(function (port) { return boards_service_1.Port.sameAs(port, board.port); }) });
                            return { value: true };
                        }
                    };
                    this_1 = this;
                    try {
                        // If we could not find an exact match, we compare the board FQBN-name pairs and ignore the port, as it might have changed.
                        // See documentation on `latestValidBoardsConfig`.
                        for (_c = __values(attachedBoards.filter(boards_service_1.AttachedSerialBoard.is)), _d = _c.next(); !_d.done; _d = _c.next()) {
                            board = _d.value;
                            state_1 = _loop_1(board);
                            if (typeof state_1 === "object")
                                return [2 /*return*/, state_1.value];
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                return [2 /*return*/, false];
            });
        });
    };
    BoardsServiceClientImpl.prototype.notifyBoardInstalled = function (event) {
        this.logger.info('Board installed: ', JSON.stringify(event));
        this.onBoardInstalledEmitter.fire(event);
    };
    BoardsServiceClientImpl.prototype.notifyBoardUninstalled = function (event) {
        this.logger.info('Board uninstalled: ', JSON.stringify(event));
        this.onBoardUninstalledEmitter.fire(event);
    };
    Object.defineProperty(BoardsServiceClientImpl.prototype, "boardsConfig", {
        get: function () {
            return this._boardsConfig;
        },
        set: function (config) {
            var _this = this;
            this.logger.info('Board config changed: ', JSON.stringify(config));
            this._boardsConfig = config;
            if (this.canUploadTo(this._boardsConfig)) {
                this.latestValidBoardsConfig = this._boardsConfig;
            }
            this.saveState().then(function () { return _this.onSelectedBoardsConfigChangedEmitter.fire(_this._boardsConfig); });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * `true` if the `config.selectedBoard` is defined; hence can compile against the board. Otherwise, `false`.
     */
    BoardsServiceClientImpl.prototype.canVerify = function (config, options) {
        if (config === void 0) { config = this.boardsConfig; }
        if (options === void 0) { options = { silent: true }; }
        if (!config) {
            return false;
        }
        if (!config.selectedBoard) {
            if (!options.silent) {
                this.messageService.warn('No boards selected.', { timeout: 3000 });
            }
            return false;
        }
        return true;
    };
    /**
     * `true` if the `canVerify` and the `config.selectedPort` is also set with FQBN, hence can upload to board. Otherwise, `false`.
     */
    BoardsServiceClientImpl.prototype.canUploadTo = function (config, options) {
        if (config === void 0) { config = this.boardsConfig; }
        if (options === void 0) { options = { silent: true }; }
        if (!this.canVerify(config, options)) {
            return false;
        }
        var name = config.selectedBoard.name;
        if (!config.selectedPort) {
            if (!options.silent) {
                this.messageService.warn("No ports selected for board: '" + name + "'.", { timeout: 3000 });
            }
            return false;
        }
        if (!config.selectedBoard.fqbn) {
            if (!options.silent) {
                this.messageService.warn("The FQBN is not available for the selected board " + name + ". Do you have the corresponding core installed?", { timeout: 3000 });
            }
            return false;
        }
        return true;
    };
    BoardsServiceClientImpl.prototype.saveState = function () {
        return this.storageService.setData('latest-valid-boards-config', this.latestValidBoardsConfig);
    };
    BoardsServiceClientImpl.prototype.loadState = function () {
        return __awaiter(this, void 0, void 0, function () {
            var storedValidBoardsConfig;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.storageService.getData('latest-valid-boards-config')];
                    case 1:
                        storedValidBoardsConfig = _a.sent();
                        if (storedValidBoardsConfig) {
                            this.latestValidBoardsConfig = storedValidBoardsConfig;
                            if (this.canUploadTo(this.latestValidBoardsConfig)) {
                                this.boardsConfig = this.latestValidBoardsConfig;
                            }
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    __decorate([
        inversify_1.inject(logger_1.ILogger),
        __metadata("design:type", Object)
    ], BoardsServiceClientImpl.prototype, "logger", void 0);
    __decorate([
        inversify_1.inject(message_service_1.MessageService),
        __metadata("design:type", message_service_1.MessageService)
    ], BoardsServiceClientImpl.prototype, "messageService", void 0);
    __decorate([
        inversify_1.inject(storage_service_1.LocalStorageService),
        __metadata("design:type", storage_service_1.LocalStorageService)
    ], BoardsServiceClientImpl.prototype, "storageService", void 0);
    BoardsServiceClientImpl = __decorate([
        inversify_1.injectable()
    ], BoardsServiceClientImpl);
    return BoardsServiceClientImpl;
}());
exports.BoardsServiceClientImpl = BoardsServiceClientImpl;
//# sourceMappingURL=boards-service-client-impl.js.map