"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDOM = require("react-dom");
var core_1 = require("@theia/core");
var boards_service_1 = require("../../common/protocol/boards-service");
var arduino_commands_1 = require("../arduino-commands");
var boards_config_1 = require("./boards-config");
var BoardsDropDown = /** @class */ (function (_super) {
    __extends(BoardsDropDown, _super);
    function BoardsDropDown(props) {
        var _this = _super.call(this, props) || this;
        var list = document.getElementById('boards-dropdown-container');
        if (!list) {
            list = document.createElement('div');
            list.id = 'boards-dropdown-container';
            document.body.appendChild(list);
            _this.dropdownElement = list;
        }
        return _this;
    }
    BoardsDropDown.prototype.render = function () {
        return ReactDOM.createPortal(this.renderNode(), this.dropdownElement);
    };
    BoardsDropDown.prototype.renderNode = function () {
        var _this = this;
        var _a = this.props, coords = _a.coords, items = _a.items;
        if (coords === 'hidden') {
            return '';
        }
        items.push({
            label: 'Select Other Board & Port',
            selected: false,
            onClick: function () { return _this.props.openBoardsConfig(); }
        });
        return React.createElement("div", { className: 'arduino-boards-dropdown-list', style: __assign({ position: 'absolute' }, coords) }, items.map(this.renderItem));
    };
    BoardsDropDown.prototype.renderItem = function (item) {
        var label = item.label, selected = item.selected, onClick = item.onClick;
        return React.createElement("div", { key: label, className: "arduino-boards-dropdown-item " + (selected ? 'selected' : ''), onClick: onClick },
            React.createElement("div", null, label),
            selected ? React.createElement("span", { className: 'fa fa-check' }) : '');
    };
    return BoardsDropDown;
}(React.Component));
exports.BoardsDropDown = BoardsDropDown;
var BoardsToolBarItem = /** @class */ (function (_super) {
    __extends(BoardsToolBarItem, _super);
    function BoardsToolBarItem(props) {
        var _this = _super.call(this, props) || this;
        _this.toDispose = new core_1.DisposableCollection();
        _this.show = function (event) {
            var element = event.currentTarget;
            if (element instanceof HTMLElement) {
                if (_this.state.coords === 'hidden') {
                    var rect = element.getBoundingClientRect();
                    _this.setState({
                        coords: {
                            top: rect.top,
                            left: rect.left,
                            width: rect.width,
                            paddingTop: rect.height
                        }
                    });
                }
                else {
                    _this.setState({ coords: 'hidden' });
                }
            }
            event.stopPropagation();
            event.nativeEvent.stopImmediatePropagation();
        };
        _this.openDialog = function () {
            _this.props.commands.executeCommand(arduino_commands_1.ArduinoCommands.OPEN_BOARDS_DIALOG.id);
            _this.setState({ coords: 'hidden' });
        };
        _this.state = {
            boardsConfig: _this.props.boardsServiceClient.boardsConfig,
            attachedBoards: [],
            availablePorts: [],
            coords: 'hidden'
        };
        document.addEventListener('click', function () {
            _this.setState({ coords: 'hidden' });
        });
        return _this;
    }
    BoardsToolBarItem.prototype.componentDidMount = function () {
        var _this = this;
        var _a = this.props, client = _a.boardsServiceClient, boardService = _a.boardService;
        this.toDispose.pushAll([
            client.onBoardsConfigChanged(function (boardsConfig) { return _this.setState({ boardsConfig: boardsConfig }); }),
            client.onBoardsChanged(function (_a) {
                var newState = _a.newState;
                return _this.setState({ attachedBoards: newState.boards, availablePorts: newState.ports });
            })
        ]);
        Promise.all([
            boardService.getAttachedBoards(),
            boardService.getAvailablePorts()
        ]).then(function (_a) {
            var _b = __read(_a, 2), attachedBoards = _b[0].boards, availablePorts = _b[1].ports;
            _this.setState({ attachedBoards: attachedBoards, availablePorts: availablePorts });
        });
    };
    BoardsToolBarItem.prototype.componentWillUnmount = function () {
        this.toDispose.dispose();
    };
    BoardsToolBarItem.prototype.render = function () {
        var _this = this;
        var _a = this.state, boardsConfig = _a.boardsConfig, coords = _a.coords, attachedBoards = _a.attachedBoards, availablePorts = _a.availablePorts;
        var title = boards_config_1.BoardsConfig.Config.toString(boardsConfig, { default: 'no board selected' });
        var configuredBoard = attachedBoards
            .filter(boards_service_1.AttachedSerialBoard.is)
            .filter(function (board) { return availablePorts.some(function (port) { return boards_service_1.Port.sameAs(port, board.port); }); })
            .filter(function (board) { return boards_config_1.BoardsConfig.Config.sameAs(boardsConfig, board); }).shift();
        var items = attachedBoards.filter(boards_service_1.AttachedSerialBoard.is).map(function (board) { return ({
            label: board.name + " at " + board.port,
            selected: configuredBoard === board,
            onClick: function () {
                _this.props.boardsServiceClient.boardsConfig = {
                    selectedBoard: board,
                    selectedPort: availablePorts.find(function (port) { return boards_service_1.Port.sameAs(port, board.port); })
                };
            }
        }); });
        return React.createElement(React.Fragment, null,
            React.createElement("div", { className: 'arduino-boards-toolbar-item-container' },
                React.createElement("div", { className: 'arduino-boards-toolbar-item', title: title },
                    React.createElement("div", { className: 'inner-container', onClick: this.show },
                        React.createElement("span", { className: !configuredBoard ? 'fa fa-times notAttached' : '' }),
                        React.createElement("div", { className: 'label noWrapInfo' },
                            React.createElement("div", { className: 'noWrapInfo noselect' }, title)),
                        React.createElement("span", { className: 'fa fa-caret-down caret' })))),
            React.createElement(BoardsDropDown, { coords: coords, items: items, openBoardsConfig: this.openDialog }));
    };
    return BoardsToolBarItem;
}(React.Component));
exports.BoardsToolBarItem = BoardsToolBarItem;
//# sourceMappingURL=boards-toolbar-item.js.map