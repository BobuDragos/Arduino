"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var ArduinoCliContribution = /** @class */ (function () {
    function ArduinoCliContribution() {
        this._debugCli = false;
    }
    ArduinoCliContribution.prototype.configure = function (conf) {
        conf.option('debug-cli', {
            description: 'Can be specified if the CLI daemon process was started externally.',
            type: 'boolean',
            default: false,
            nargs: 1
        });
    };
    ArduinoCliContribution.prototype.setArguments = function (args) {
        this._debugCli = args['debug-cli'];
    };
    Object.defineProperty(ArduinoCliContribution.prototype, "debugCli", {
        get: function () {
            return this._debugCli;
        },
        enumerable: true,
        configurable: true
    });
    ArduinoCliContribution = __decorate([
        inversify_1.injectable()
    ], ArduinoCliContribution);
    return ArduinoCliContribution;
}());
exports.ArduinoCliContribution = ArduinoCliContribution;
//# sourceMappingURL=arduino-cli-contribution.js.map