"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
require("../../src/browser/style/index.css");
var inversify_1 = require("inversify");
var widget_manager_1 = require("@theia/core/lib/browser/widget-manager");
var command_1 = require("@theia/core/lib/common/command");
var view_contribution_1 = require("@theia/core/lib/browser/shell/view-contribution");
var tab_bar_toolbar_1 = require("@theia/core/lib/browser/shell/tab-bar-toolbar");
var ws_connection_provider_1 = require("@theia/core/lib/browser/messaging/ws-connection-provider");
var frontend_application_1 = require("@theia/core/lib/browser/frontend-application");
var textmate_1 = require("@theia/monaco/lib/browser/textmate");
var browser_1 = require("@theia/languages/lib/browser");
var arduino_language_client_contribution_1 = require("./language/arduino-language-client-contribution");
var library_list_widget_1 = require("./library/library-list-widget");
var arduino_frontend_contribution_1 = require("./arduino-frontend-contribution");
var arduino_language_grammar_contribution_1 = require("./language/arduino-language-grammar-contribution");
var library_service_1 = require("../common/protocol/library-service");
var boards_service_1 = require("../common/protocol/boards-service");
var sketches_service_1 = require("../common/protocol/sketches-service");
var core_service_1 = require("../common/protocol/core-service");
var boards_list_widget_1 = require("./boards/boards-list-widget");
var boards_widget_frontend_contribution_1 = require("./boards/boards-widget-frontend-contribution");
var workspace_service_ext_1 = require("./workspace-service-ext");
var workspace_service_ext_impl_1 = require("./workspace-service-ext-impl");
var tool_output_service_1 = require("../common/protocol/tool-output-service");
var tool_output_service_2 = require("../common/protocol/tool-output-service");
var client_service_impl_1 = require("./tool-output/client-service-impl");
var boards_service_client_impl_1 = require("./boards/boards-service-client-impl");
var workspace_service_1 = require("@theia/workspace/lib/browser/workspace-service");
var arduino_workspace_service_1 = require("./arduino-workspace-service");
var theming_1 = require("@theia/core/lib/browser/theming");
var arduino_theme_1 = require("./arduino-theme");
var outline_view_contribution_1 = require("@theia/outline-view/lib/browser/outline-view-contribution");
var arduino_outline_contribution_1 = require("./customization/arduino-outline-contribution");
var problem_contribution_1 = require("@theia/markers/lib/browser/problem/problem-contribution");
var arduino_problem_contribution_1 = require("./customization/arduino-problem-contribution");
var arduino_navigator_contribution_1 = require("./customization/arduino-navigator-contribution");
var navigator_contribution_1 = require("@theia/navigator/lib/browser/navigator-contribution");
var arduino_toolbar_contribution_1 = require("./toolbar/arduino-toolbar-contribution");
var output_toolbar_contribution_1 = require("@theia/output/lib/browser/output-toolbar-contribution");
var arduino_output_tool_contribution_1 = require("./customization/arduino-output-tool-contribution");
var editor_contribution_1 = require("@theia/editor/lib/browser/editor-contribution");
var arduino_editor_contribution_1 = require("./customization/arduino-editor-contribution");
var monaco_status_bar_contribution_1 = require("@theia/monaco/lib/browser/monaco-status-bar-contribution");
var arduino_monaco_status_bar_contribution_1 = require("./customization/arduino-monaco-status-bar-contribution");
var browser_2 = require("@theia/core/lib/browser");
var menu_1 = require("@theia/core/lib/common/menu");
var arduino_application_shell_1 = require("./customization/arduino-application-shell");
var arduino_frontend_application_1 = require("./customization/arduino-frontend-application");
var boards_config_dialog_1 = require("./boards/boards-config-dialog");
var boards_config_dialog_widget_1 = require("./boards/boards-config-dialog-widget");
var scm_contribution_1 = require("@theia/scm/lib/browser/scm-contribution");
var arduino_scm_contribution_1 = require("./customization/arduino-scm-contribution");
var search_in_workspace_frontend_contribution_1 = require("@theia/search-in-workspace/lib/browser/search-in-workspace-frontend-contribution");
var arduino_search_in_workspace_contribution_1 = require("./customization/arduino-search-in-workspace-contribution");
var library_widget_frontend_contribution_1 = require("./library/library-widget-frontend-contribution");
var monitor_service_client_impl_1 = require("./monitor/monitor-service-client-impl");
var monitor_service_1 = require("../common/protocol/monitor-service");
var config_service_1 = require("../common/protocol/config-service");
var monitor_widget_1 = require("./monitor/monitor-widget");
var monitor_view_contribution_1 = require("./monitor/monitor-view-contribution");
var monitor_connection_1 = require("./monitor/monitor-connection");
var monitor_model_1 = require("./monitor/monitor-model");
var monaco_editor_provider_1 = require("@theia/monaco/lib/browser/monaco-editor-provider");
var arduino_monaco_editor_provider_1 = require("./editor/arduino-monaco-editor-provider");
var tab_bar_decorator_1 = require("@theia/core/lib/browser/shell/tab-bar-decorator");
var arduino_tab_bar_decorator_1 = require("./shell/arduino-tab-bar-decorator");
var browser_3 = require("@theia/markers/lib/browser");
var arduino_problem_manager_1 = require("./markers/arduino-problem-manager");
var boards_auto_installer_1 = require("./boards/boards-auto-installer");
var about_dialog_1 = require("@theia/core/lib/browser/about-dialog");
var arduino_about_dialog_1 = require("./customization/arduino-about-dialog");
var arduino_shell_layout_restorer_1 = require("./shell/arduino-shell-layout-restorer");
var editor_mode_1 = require("./editor-mode");
var list_item_renderer_1 = require("./components/component-list/list-item-renderer");
var ElementQueries = require('css-element-queries/src/ElementQueries');
exports.default = new inversify_1.ContainerModule(function (bind, unbind, isBound, rebind) {
    ElementQueries.listen();
    ElementQueries.init();
    // Commands and toolbar items
    bind(arduino_frontend_contribution_1.ArduinoFrontendContribution).toSelf().inSingletonScope();
    bind(command_1.CommandContribution).toService(arduino_frontend_contribution_1.ArduinoFrontendContribution);
    bind(menu_1.MenuContribution).toService(arduino_frontend_contribution_1.ArduinoFrontendContribution);
    bind(tab_bar_toolbar_1.TabBarToolbarContribution).toService(arduino_frontend_contribution_1.ArduinoFrontendContribution);
    bind(browser_2.KeybindingContribution).toService(arduino_frontend_contribution_1.ArduinoFrontendContribution);
    bind(frontend_application_1.FrontendApplicationContribution).toService(arduino_frontend_contribution_1.ArduinoFrontendContribution);
    bind(arduino_toolbar_contribution_1.ArduinoToolbarContribution).toSelf().inSingletonScope();
    bind(frontend_application_1.FrontendApplicationContribution).toService(arduino_toolbar_contribution_1.ArduinoToolbarContribution);
    // `ino` TextMate grammar and language client
    bind(textmate_1.LanguageGrammarDefinitionContribution).to(arduino_language_grammar_contribution_1.ArduinoLanguageGrammarContribution).inSingletonScope();
    bind(browser_1.LanguageClientContribution).to(arduino_language_client_contribution_1.ArduinoLanguageClientContribution).inSingletonScope();
    // Renderer for both the library and the core widgets.
    bind(list_item_renderer_1.ListItemRenderer).toSelf().inSingletonScope();
    // Library service
    bind(library_service_1.LibraryService).toDynamicValue(function (context) { return ws_connection_provider_1.WebSocketConnectionProvider.createProxy(context.container, library_service_1.LibraryServicePath); }).inSingletonScope();
    // Library list widget
    bind(library_list_widget_1.LibraryListWidget).toSelf();
    view_contribution_1.bindViewContribution(bind, library_widget_frontend_contribution_1.LibraryListWidgetFrontendContribution);
    bind(widget_manager_1.WidgetFactory).toDynamicValue(function (context) { return ({
        id: library_list_widget_1.LibraryListWidget.WIDGET_ID,
        createWidget: function () { return context.container.get(library_list_widget_1.LibraryListWidget); }
    }); });
    bind(frontend_application_1.FrontendApplicationContribution).toService(library_widget_frontend_contribution_1.LibraryListWidgetFrontendContribution);
    // Sketch list service
    bind(sketches_service_1.SketchesService).toDynamicValue(function (context) { return ws_connection_provider_1.WebSocketConnectionProvider.createProxy(context.container, sketches_service_1.SketchesServicePath); }).inSingletonScope();
    // Config service
    bind(config_service_1.ConfigService).toDynamicValue(function (context) { return ws_connection_provider_1.WebSocketConnectionProvider.createProxy(context.container, config_service_1.ConfigServicePath); }).inSingletonScope();
    // Boards service
    bind(boards_service_1.BoardsService).toDynamicValue(function (context) {
        var connection = context.container.get(ws_connection_provider_1.WebSocketConnectionProvider);
        var client = context.container.get(boards_service_client_impl_1.BoardsServiceClientImpl);
        return connection.createProxy(boards_service_1.BoardsServicePath, client);
    }).inSingletonScope();
    // Boards service client to receive and delegate notifications from the backend.
    bind(boards_service_client_impl_1.BoardsServiceClientImpl).toSelf().inSingletonScope();
    bind(frontend_application_1.FrontendApplicationContribution).toService(boards_service_client_impl_1.BoardsServiceClientImpl);
    bind(boards_service_1.BoardsServiceClient).toDynamicValue(function (context) {
        var client = context.container.get(boards_service_client_impl_1.BoardsServiceClientImpl);
        ws_connection_provider_1.WebSocketConnectionProvider.createProxy(context.container, boards_service_1.BoardsServicePath, client);
        return client;
    }).inSingletonScope();
    // boards auto-installer
    bind(boards_auto_installer_1.BoardsAutoInstaller).toSelf().inSingletonScope();
    bind(frontend_application_1.FrontendApplicationContribution).toService(boards_auto_installer_1.BoardsAutoInstaller);
    // Boards list widget
    bind(boards_list_widget_1.BoardsListWidget).toSelf();
    view_contribution_1.bindViewContribution(bind, boards_widget_frontend_contribution_1.BoardsListWidgetFrontendContribution);
    bind(widget_manager_1.WidgetFactory).toDynamicValue(function (context) { return ({
        id: boards_list_widget_1.BoardsListWidget.WIDGET_ID,
        createWidget: function () { return context.container.get(boards_list_widget_1.BoardsListWidget); }
    }); });
    bind(frontend_application_1.FrontendApplicationContribution).toService(boards_widget_frontend_contribution_1.BoardsListWidgetFrontendContribution);
    // Board select dialog
    bind(boards_config_dialog_widget_1.BoardsConfigDialogWidget).toSelf().inSingletonScope();
    bind(boards_config_dialog_1.BoardsConfigDialog).toSelf().inSingletonScope();
    bind(boards_config_dialog_1.BoardsConfigDialogProps).toConstantValue({
        title: 'Select Board'
    });
    // Core service
    bind(core_service_1.CoreService)
        .toDynamicValue(function (context) { return ws_connection_provider_1.WebSocketConnectionProvider.createProxy(context.container, core_service_1.CoreServicePath); })
        .inSingletonScope();
    // Tool output service client
    bind(client_service_impl_1.ToolOutputServiceClientImpl).toSelf().inSingletonScope();
    bind(tool_output_service_1.ToolOutputServiceClient).toDynamicValue(function (context) {
        var client = context.container.get(client_service_impl_1.ToolOutputServiceClientImpl);
        ws_connection_provider_1.WebSocketConnectionProvider.createProxy(context.container, tool_output_service_2.ToolOutputService.SERVICE_PATH, client);
        return client;
    }).inSingletonScope();
    // The workspace service extension
    bind(workspace_service_ext_1.WorkspaceServiceExt).to(workspace_service_ext_impl_1.WorkspaceServiceExtImpl).inSingletonScope().onActivation(function (_a, workspaceServiceExt) {
        var container = _a.container;
        ws_connection_provider_1.WebSocketConnectionProvider.createProxy(container, workspace_service_ext_1.WorkspaceServiceExtPath, workspaceServiceExt);
        // Eagerly active the core, library, and boards services.
        container.get(core_service_1.CoreService);
        container.get(library_service_1.LibraryService);
        container.get(boards_service_1.BoardsService);
        container.get(sketches_service_1.SketchesService);
        return workspaceServiceExt;
    });
    // Serial Monitor
    bind(monitor_model_1.MonitorModel).toSelf().inSingletonScope();
    bind(frontend_application_1.FrontendApplicationContribution).toService(monitor_model_1.MonitorModel);
    bind(monitor_widget_1.MonitorWidget).toSelf();
    view_contribution_1.bindViewContribution(bind, monitor_view_contribution_1.MonitorViewContribution);
    bind(tab_bar_toolbar_1.TabBarToolbarContribution).toService(monitor_view_contribution_1.MonitorViewContribution);
    bind(widget_manager_1.WidgetFactory).toDynamicValue(function (context) { return ({
        id: monitor_widget_1.MonitorWidget.ID,
        createWidget: function () { return context.container.get(monitor_widget_1.MonitorWidget); }
    }); });
    // Frontend binding for the monitor service
    bind(monitor_service_1.MonitorService).toDynamicValue(function (context) {
        var connection = context.container.get(ws_connection_provider_1.WebSocketConnectionProvider);
        var client = context.container.get(monitor_service_client_impl_1.MonitorServiceClientImpl);
        return connection.createProxy(monitor_service_1.MonitorServicePath, client);
    }).inSingletonScope();
    bind(monitor_connection_1.MonitorConnection).toSelf().inSingletonScope();
    // Monitor service client to receive and delegate notifications from the backend.
    bind(monitor_service_client_impl_1.MonitorServiceClientImpl).toSelf().inSingletonScope();
    bind(monitor_service_1.MonitorServiceClient).toDynamicValue(function (context) {
        var client = context.container.get(monitor_service_client_impl_1.MonitorServiceClientImpl);
        ws_connection_provider_1.WebSocketConnectionProvider.createProxy(context.container, monitor_service_1.MonitorServicePath, client);
        return client;
    }).inSingletonScope();
    bind(arduino_workspace_service_1.ArduinoWorkspaceService).toSelf().inSingletonScope();
    rebind(workspace_service_1.WorkspaceService).toService(arduino_workspace_service_1.ArduinoWorkspaceService);
    var themeService = theming_1.ThemeService.get();
    themeService.register.apply(themeService, __spread(arduino_theme_1.ArduinoTheme.themes));
    // Customizing default Theia layout based on the editor mode: `pro-mode` or `classic`.
    bind(editor_mode_1.EditorMode).toSelf().inSingletonScope();
    bind(frontend_application_1.FrontendApplicationContribution).toService(editor_mode_1.EditorMode);
    rebind(outline_view_contribution_1.OutlineViewContribution).to(arduino_outline_contribution_1.ArduinoOutlineViewContribution).inSingletonScope();
    rebind(problem_contribution_1.ProblemContribution).to(arduino_problem_contribution_1.ArduinoProblemContribution).inSingletonScope();
    rebind(navigator_contribution_1.FileNavigatorContribution).to(arduino_navigator_contribution_1.ArduinoNavigatorContribution).inSingletonScope();
    rebind(output_toolbar_contribution_1.OutputToolbarContribution).to(arduino_output_tool_contribution_1.ArduinoOutputToolContribution).inSingletonScope();
    rebind(editor_contribution_1.EditorContribution).to(arduino_editor_contribution_1.ArduinoEditorContribution).inSingletonScope();
    rebind(monaco_status_bar_contribution_1.MonacoStatusBarContribution).to(arduino_monaco_status_bar_contribution_1.ArduinoMonacoStatusBarContribution).inSingletonScope();
    rebind(browser_2.ApplicationShell).to(arduino_application_shell_1.ArduinoApplicationShell).inSingletonScope();
    rebind(scm_contribution_1.ScmContribution).to(arduino_scm_contribution_1.ArduinoScmContribution).inSingletonScope();
    rebind(search_in_workspace_frontend_contribution_1.SearchInWorkspaceFrontendContribution).to(arduino_search_in_workspace_contribution_1.ArduinoSearchInWorkspaceContribution).inSingletonScope();
    rebind(frontend_application_1.FrontendApplication).to(arduino_frontend_application_1.ArduinoFrontendApplication).inSingletonScope();
    // Monaco customizations
    bind(arduino_monaco_editor_provider_1.ArduinoMonacoEditorProvider).toSelf().inSingletonScope();
    rebind(monaco_editor_provider_1.MonacoEditorProvider).toService(arduino_monaco_editor_provider_1.ArduinoMonacoEditorProvider);
    // Decorator customizations
    bind(arduino_tab_bar_decorator_1.ArduinoTabBarDecoratorService).toSelf().inSingletonScope();
    rebind(tab_bar_decorator_1.TabBarDecoratorService).toService(arduino_tab_bar_decorator_1.ArduinoTabBarDecoratorService);
    // Problem markers
    bind(arduino_problem_manager_1.ArduinoProblemManager).toSelf().inSingletonScope();
    rebind(browser_3.ProblemManager).toService(arduino_problem_manager_1.ArduinoProblemManager);
    // About dialog to show the CLI version
    bind(arduino_about_dialog_1.ArduinoAboutDialog).toSelf().inSingletonScope();
    rebind(about_dialog_1.AboutDialog).toService(arduino_about_dialog_1.ArduinoAboutDialog);
    // Customized layout restorer that can restore the state in async way: https://github.com/eclipse-theia/theia/issues/6579
    bind(arduino_shell_layout_restorer_1.ArduinoShellLayoutRestorer).toSelf().inSingletonScope();
    rebind(browser_2.ShellLayoutRestorer).toService(arduino_shell_layout_restorer_1.ArduinoShellLayoutRestorer);
});
//# sourceMappingURL=arduino-frontend-module.js.map