"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var os = require("os");
var path_1 = require("path");
var inversify_1 = require("inversify");
var arduino_daemon_1 = require("./arduino-daemon");
var logger_1 = require("@theia/core/lib/common/logger");
var backend_application_1 = require("@theia/core/lib/node/backend-application");
var node_1 = require("@theia/languages/lib/node");
var arduino_language_server_contribution_1 = require("./language/arduino-language-server-contribution");
var library_service_1 = require("../common/protocol/library-service");
var boards_service_1 = require("../common/protocol/boards-service");
var library_service_impl_1 = require("./library-service-impl");
var boards_service_impl_1 = require("./boards-service-impl");
var core_service_impl_1 = require("./core-service-impl");
var core_service_1 = require("../common/protocol/core-service");
var connection_container_module_1 = require("@theia/core/lib/node/messaging/connection-container-module");
var workspace_service_ext_1 = require("../browser/workspace-service-ext");
var core_client_provider_impl_1 = require("./core-client-provider-impl");
var core_client_provider_1 = require("./core-client-provider");
var tool_output_service_1 = require("../common/protocol/tool-output-service");
var core_1 = require("@theia/core");
var tool_output_service_impl_1 = require("./tool-output-service-impl");
var default_workspace_server_ext_1 = require("./default-workspace-server-ext");
var common_1 = require("@theia/workspace/lib/common");
var sketches_service_impl_1 = require("./sketches-service-impl");
var sketches_service_1 = require("../common/protocol/sketches-service");
var config_service_1 = require("../common/protocol/config-service");
var monitor_service_impl_1 = require("./monitor/monitor-service-impl");
var monitor_service_1 = require("../common/protocol/monitor-service");
var monitor_client_provider_1 = require("./monitor/monitor-client-provider");
var arduino_cli_1 = require("./arduino-cli");
var arduino_cli_contribution_1 = require("./arduino-cli-contribution");
var node_2 = require("@theia/core/lib/node");
var config_service_impl_1 = require("./config-service-impl");
exports.default = new inversify_1.ContainerModule(function (bind, unbind, isBound, rebind) {
    // Theia backend CLI contribution.
    bind(arduino_cli_contribution_1.ArduinoCliContribution).toSelf().inSingletonScope();
    bind(node_2.CliContribution).toService(arduino_cli_contribution_1.ArduinoCliContribution);
    // Provides the path of the Arduino CLI.
    bind(arduino_cli_1.ArduinoCli).toSelf().inSingletonScope();
    // Shared daemon 
    bind(arduino_daemon_1.ArduinoDaemon).toSelf().inSingletonScope();
    bind(backend_application_1.BackendApplicationContribution).toService(arduino_daemon_1.ArduinoDaemon);
    // Language server
    bind(arduino_language_server_contribution_1.ArduinoLanguageServerContribution).toSelf().inSingletonScope();
    bind(node_1.LanguageServerContribution).toService(arduino_language_server_contribution_1.ArduinoLanguageServerContribution);
    // Library service
    var libraryServiceConnectionModule = connection_container_module_1.ConnectionContainerModule.create(function (_a) {
        var bind = _a.bind, bindBackendService = _a.bindBackendService;
        bind(library_service_impl_1.LibraryServiceImpl).toSelf().inSingletonScope();
        bind(library_service_1.LibraryService).toService(library_service_impl_1.LibraryServiceImpl);
        bindBackendService(library_service_1.LibraryServicePath, library_service_1.LibraryService);
    });
    bind(connection_container_module_1.ConnectionContainerModule).toConstantValue(libraryServiceConnectionModule);
    // Sketches service
    var sketchesServiceConnectionModule = connection_container_module_1.ConnectionContainerModule.create(function (_a) {
        var bind = _a.bind, bindBackendService = _a.bindBackendService;
        bind(sketches_service_impl_1.SketchesServiceImpl).toSelf().inSingletonScope();
        bind(sketches_service_1.SketchesService).toService(sketches_service_impl_1.SketchesServiceImpl);
        bindBackendService(sketches_service_1.SketchesServicePath, sketches_service_1.SketchesService);
    });
    bind(connection_container_module_1.ConnectionContainerModule).toConstantValue(sketchesServiceConnectionModule);
    // Config service
    bind(config_service_impl_1.ConfigServiceImpl).toSelf().inSingletonScope();
    bind(config_service_1.ConfigService).toService(config_service_impl_1.ConfigServiceImpl);
    var configServiceConnectionModule = connection_container_module_1.ConnectionContainerModule.create(function (_a) {
        var bind = _a.bind, bindBackendService = _a.bindBackendService;
        bindBackendService(config_service_1.ConfigServicePath, config_service_1.ConfigService);
    });
    bind(connection_container_module_1.ConnectionContainerModule).toConstantValue(configServiceConnectionModule);
    // Boards service
    var boardsServiceConnectionModule = connection_container_module_1.ConnectionContainerModule.create(function (_a) {
        var bind = _a.bind, bindBackendService = _a.bindBackendService;
        bind(boards_service_impl_1.BoardsServiceImpl).toSelf().inSingletonScope();
        bind(boards_service_1.BoardsService).toService(boards_service_impl_1.BoardsServiceImpl);
        bindBackendService(boards_service_1.BoardsServicePath, boards_service_1.BoardsService, function (service, client) {
            service.setClient(client);
            client.onDidCloseConnection(function () { return service.dispose(); });
            return service;
        });
    });
    bind(connection_container_module_1.ConnectionContainerModule).toConstantValue(boardsServiceConnectionModule);
    // Arduino core client provider per Theia connection.
    var coreClientProviderConnectionModule = connection_container_module_1.ConnectionContainerModule.create(function (_a) {
        var bind = _a.bind, bindBackendService = _a.bindBackendService;
        bind(core_client_provider_impl_1.CoreClientProviderImpl).toSelf().inSingletonScope();
        bind(core_client_provider_1.CoreClientProvider).toService(core_client_provider_impl_1.CoreClientProviderImpl);
        bindBackendService(core_client_provider_1.CoreClientProviderPath, core_client_provider_1.CoreClientProvider);
    });
    bind(connection_container_module_1.ConnectionContainerModule).toConstantValue(coreClientProviderConnectionModule);
    // Core service -> `verify` and `upload`. One per Theia connection.
    var connectionConnectionModule = connection_container_module_1.ConnectionContainerModule.create(function (_a) {
        var bind = _a.bind, bindBackendService = _a.bindBackendService;
        bind(core_service_impl_1.CoreServiceImpl).toSelf().inSingletonScope();
        bind(core_service_1.CoreService).toService(core_service_impl_1.CoreServiceImpl);
        bindBackendService(boards_service_1.BoardsServicePath, boards_service_1.BoardsService);
        bindBackendService(core_client_provider_1.CoreClientProviderPath, core_client_provider_1.CoreClientProvider);
        bindBackendService(core_service_1.CoreServicePath, core_service_1.CoreService);
    });
    bind(connection_container_module_1.ConnectionContainerModule).toConstantValue(connectionConnectionModule);
    // Tool output service -> feedback from the daemon, compile and flash
    bind(tool_output_service_1.ToolOutputServiceServer).to(tool_output_service_impl_1.ToolOutputServiceServerImpl).inSingletonScope();
    bind(core_1.ConnectionHandler).toDynamicValue(function (context) {
        return new core_1.JsonRpcConnectionHandler(tool_output_service_1.ToolOutputService.SERVICE_PATH, function (client) {
            var server = context.container.get(tool_output_service_1.ToolOutputServiceServer);
            server.setClient(client);
            client.onDidCloseConnection(function () { return server.disposeClient(client); });
            return server;
        });
    }).inSingletonScope();
    // Bind the workspace service extension to the backend per Theia connection.
    // So that we can access the workspace roots of the frontend.
    var workspaceServiceExtConnectionModule = connection_container_module_1.ConnectionContainerModule.create(function (_a) {
        var bindFrontendService = _a.bindFrontendService;
        bindFrontendService(workspace_service_ext_1.WorkspaceServiceExtPath, workspace_service_ext_1.WorkspaceServiceExt);
    });
    bind(connection_container_module_1.ConnectionContainerModule).toConstantValue(workspaceServiceExtConnectionModule);
    // Logger for the Arduino daemon
    bind(logger_1.ILogger).toDynamicValue(function (ctx) {
        var parentLogger = ctx.container.get(logger_1.ILogger);
        return parentLogger.child('daemon');
    }).inSingletonScope().whenTargetNamed('daemon');
    // Logger for the "serial discovery".
    bind(logger_1.ILogger).toDynamicValue(function (ctx) {
        var parentLogger = ctx.container.get(logger_1.ILogger);
        return parentLogger.child('discovery');
    }).inSingletonScope().whenTargetNamed('discovery');
    // Default workspace server extension to initialize and use a fallback workspace.
    // If nothing was set previously.
    bind(default_workspace_server_ext_1.DefaultWorkspaceServerExt).toSelf().inSingletonScope();
    rebind(common_1.WorkspaceServer).toService(default_workspace_server_ext_1.DefaultWorkspaceServerExt);
    // Shared monitor client provider service for the backend.
    bind(monitor_client_provider_1.MonitorClientProvider).toSelf().inSingletonScope();
    // Connection scoped service for the serial monitor.
    var monitorServiceConnectionModule = connection_container_module_1.ConnectionContainerModule.create(function (_a) {
        var bind = _a.bind, bindBackendService = _a.bindBackendService;
        bind(monitor_service_impl_1.MonitorServiceImpl).toSelf().inSingletonScope();
        bind(monitor_service_1.MonitorService).toService(monitor_service_impl_1.MonitorServiceImpl);
        bindBackendService(monitor_service_1.MonitorServicePath, monitor_service_1.MonitorService, function (service, client) {
            service.setClient(client);
            client.onDidCloseConnection(function () { return service.dispose(); });
            return service;
        });
    });
    bind(connection_container_module_1.ConnectionContainerModule).toConstantValue(monitorServiceConnectionModule);
    // Logger for the monitor service.
    bind(logger_1.ILogger).toDynamicValue(function (ctx) {
        var parentLogger = ctx.container.get(logger_1.ILogger);
        return parentLogger.child('monitor-service');
    }).inSingletonScope().whenTargetNamed('monitor-service');
    // Set up cpp extension
    if (!process.env.CPP_CLANGD_COMMAND) {
        var segments = ['..', '..', 'build'];
        if (os.platform() === 'win32') {
            segments.push('clangd.exe');
        }
        else {
            segments.push('bin');
            segments.push('clangd');
        }
        var clangdCommand = path_1.join.apply(void 0, __spread([__dirname], segments));
        if (fs.existsSync(clangdCommand)) {
            process.env.CPP_CLANGD_COMMAND = clangdCommand;
        }
    }
});
//# sourceMappingURL=arduino-backend-module.js.map