"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var core_1 = require("@theia/core");
var boards_service_1 = require("../../common/protocol/boards-service");
var Item = /** @class */ (function (_super) {
    __extends(Item, _super);
    function Item() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onClick = function () {
            _this.props.onClick(_this.props.item);
        };
        return _this;
    }
    Item.prototype.render = function () {
        var _a = this.props, selected = _a.selected, label = _a.label, missing = _a.missing, detail = _a.detail;
        var classNames = ['item'];
        if (selected) {
            classNames.push('selected');
        }
        if (missing === true) {
            classNames.push('missing');
        }
        return React.createElement("div", { onClick: this.onClick, className: classNames.join(' '), title: "" + label + (!detail ? '' : detail) },
            React.createElement("div", { className: 'label' }, label),
            !detail ? '' : React.createElement("div", { className: 'detail' }, detail),
            !selected ? '' : React.createElement("div", { className: 'selected-icon' },
                React.createElement("i", { className: 'fa fa-check' })));
    };
    return Item;
}(React.Component));
exports.Item = Item;
var BoardsConfig = /** @class */ (function (_super) {
    __extends(BoardsConfig, _super);
    function BoardsConfig(props) {
        var _this = _super.call(this, props) || this;
        _this.toDispose = new core_1.DisposableCollection();
        _this.updateBoards = function (eventOrQuery) {
            if (eventOrQuery === void 0) { eventOrQuery = ''; }
            var query = (typeof eventOrQuery === 'string'
                ? eventOrQuery
                : eventOrQuery.target.value.toLowerCase()).trim();
            _this.queryBoards({ query: query }).then(function (_a) {
                var searchResults = _a.searchResults;
                return _this.setState({ searchResults: searchResults });
            });
        };
        _this.updatePorts = function (ports, removedPorts) {
            if (ports === void 0) { ports = []; }
            if (removedPorts === void 0) { removedPorts = []; }
            _this.queryPorts(Promise.resolve({ ports: ports })).then(function (_a) {
                var knownPorts = _a.knownPorts;
                var selectedPort = _this.state.selectedPort;
                // If the currently selected port is not available anymore, unset the selected port.
                if (removedPorts.some(function (port) { return boards_service_1.Port.equals(port, selectedPort); })) {
                    selectedPort = undefined;
                }
                _this.setState({ knownPorts: knownPorts, selectedPort: selectedPort }, function () { return _this.fireConfigChanged(); });
            });
        };
        _this.queryBoards = function (options) {
            if (options === void 0) { options = {}; }
            var boardsService = _this.props.boardsService;
            var query = (options.query || '').toLocaleLowerCase();
            return new Promise(function (resolve) {
                boardsService.search(options)
                    .then(function (_a) {
                    var items = _a.items;
                    return items
                        .map(function (item) { return item.boards.map(function (board) { return (__assign({}, board, { packageName: item.name })); }); })
                        .reduce(function (acc, curr) { return acc.concat(curr); }, [])
                        .filter(function (board) { return board.name.toLocaleLowerCase().indexOf(query) !== -1; })
                        .sort(boards_service_1.Board.compare);
                })
                    .then(function (searchResults) { return resolve({ searchResults: searchResults }); });
            });
        };
        _this.queryPorts = function (availablePorts) {
            if (availablePorts === void 0) { availablePorts = _this.availablePorts; }
            return new Promise(function (resolve) {
                availablePorts
                    .then(function (_a) {
                    var ports = _a.ports;
                    return ports
                        .sort(boards_service_1.Port.compare);
                })
                    .then(function (knownPorts) { return resolve({ knownPorts: knownPorts }); });
            });
        };
        _this.toggleFilterPorts = function () {
            _this.setState({ showAllPorts: !_this.state.showAllPorts });
        };
        _this.selectPort = function (selectedPort) {
            _this.setState({ selectedPort: selectedPort }, function () { return _this.fireConfigChanged(); });
        };
        _this.selectBoard = function (selectedBoard) {
            _this.setState({ selectedBoard: selectedBoard }, function () { return _this.fireConfigChanged(); });
        };
        _this.focusNodeSet = function (element) {
            _this.props.onFocusNodeSet(element || undefined);
        };
        var boardsConfig = props.boardsServiceClient.boardsConfig;
        _this.state = __assign({ searchResults: [], knownPorts: [], showAllPorts: false }, boardsConfig);
        return _this;
    }
    BoardsConfig.prototype.componentDidMount = function () {
        var _this = this;
        this.updateBoards();
        this.props.boardsService.getAvailablePorts().then(function (_a) {
            var ports = _a.ports;
            return _this.updatePorts(ports);
        });
        var client = this.props.boardsServiceClient;
        this.toDispose.pushAll([
            client.onBoardsChanged(function (event) { return _this.updatePorts(event.newState.ports, boards_service_1.AttachedBoardsChangeEvent.diff(event).detached.ports); }),
            client.onBoardsConfigChanged(function (_a) {
                var selectedBoard = _a.selectedBoard, selectedPort = _a.selectedPort;
                _this.setState({ selectedBoard: selectedBoard, selectedPort: selectedPort }, function () { return _this.fireConfigChanged(); });
            })
        ]);
    };
    BoardsConfig.prototype.componentWillUnmount = function () {
        this.toDispose.dispose();
    };
    BoardsConfig.prototype.fireConfigChanged = function () {
        var _a = this.state, selectedBoard = _a.selectedBoard, selectedPort = _a.selectedPort;
        this.props.onConfigChange({ selectedBoard: selectedBoard, selectedPort: selectedPort });
    };
    Object.defineProperty(BoardsConfig.prototype, "attachedBoards", {
        get: function () {
            return this.props.boardsService.getAttachedBoards();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BoardsConfig.prototype, "availablePorts", {
        get: function () {
            return this.props.boardsService.getAvailablePorts();
        },
        enumerable: true,
        configurable: true
    });
    BoardsConfig.prototype.render = function () {
        return React.createElement("div", { className: 'body' },
            this.renderContainer('boards', this.renderBoards.bind(this)),
            this.renderContainer('ports', this.renderPorts.bind(this), this.renderPortsFooter.bind(this)));
    };
    BoardsConfig.prototype.renderContainer = function (title, contentRenderer, footerRenderer) {
        return React.createElement("div", { className: 'container' },
            React.createElement("div", { className: 'content' },
                React.createElement("div", { className: 'title' }, title),
                contentRenderer(),
                React.createElement("div", { className: 'footer' }, (footerRenderer ? footerRenderer() : ''))));
    };
    BoardsConfig.prototype.renderBoards = function () {
        var e_1, _a;
        var _this = this;
        var _b = this.state, selectedBoard = _b.selectedBoard, searchResults = _b.searchResults;
        // Board names are not unique. We show the corresponding core name as a detail.
        // https://github.com/arduino/arduino-cli/pull/294#issuecomment-513764948
        var distinctBoardNames = new Map();
        try {
            for (var searchResults_1 = __values(searchResults), searchResults_1_1 = searchResults_1.next(); !searchResults_1_1.done; searchResults_1_1 = searchResults_1.next()) {
                var name_1 = searchResults_1_1.value.name;
                var counter = distinctBoardNames.get(name_1) || 0;
                distinctBoardNames.set(name_1, counter + 1);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (searchResults_1_1 && !searchResults_1_1.done && (_a = searchResults_1.return)) _a.call(searchResults_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // Due to the non-unique board names, we have to check the package name as well.
        var selected = function (board) {
            if (!!selectedBoard) {
                if (boards_service_1.Board.equals(board, selectedBoard)) {
                    if ('packageName' in selectedBoard) {
                        return board.packageName === selectedBoard.packageName;
                    }
                    return true;
                }
            }
            return false;
        };
        return React.createElement(React.Fragment, null,
            React.createElement("div", { className: 'search' },
                React.createElement("input", { type: 'search', placeholder: 'SEARCH BOARD', onChange: this.updateBoards, ref: this.focusNodeSet }),
                React.createElement("i", { className: 'fa fa-search' })),
            React.createElement("div", { className: 'boards list' }, this.state.searchResults.map(function (board) { return React.createElement(Item, { key: board.name + "-" + board.packageName, item: board, label: board.name, detail: (distinctBoardNames.get(board.name) || 0) > 1 ? " - " + board.packageName : undefined, selected: selected(board), onClick: _this.selectBoard, missing: !boards_service_1.Board.installed(board) }); })));
    };
    BoardsConfig.prototype.renderPorts = function () {
        var _this = this;
        var filter = this.state.showAllPorts ? function () { return true; } : boards_service_1.Port.isBoardPort;
        var ports = this.state.knownPorts.filter(filter);
        return !ports.length ?
            (React.createElement("div", { className: 'loading noselect' }, "No ports discovered")) :
            (React.createElement("div", { className: 'ports list' }, ports.map(function (port) { return React.createElement(Item, { key: boards_service_1.Port.toString(port), item: port, label: boards_service_1.Port.toString(port), selected: boards_service_1.Port.equals(_this.state.selectedPort, port), onClick: _this.selectPort }); })));
    };
    BoardsConfig.prototype.renderPortsFooter = function () {
        return React.createElement("div", { className: 'noselect' },
            React.createElement("label", { title: 'Shows all available ports when enabled' },
                React.createElement("input", { type: 'checkbox', defaultChecked: this.state.showAllPorts, onChange: this.toggleFilterPorts }),
                React.createElement("span", null, "Show all ports")));
    };
    return BoardsConfig;
}(React.Component));
exports.BoardsConfig = BoardsConfig;
(function (BoardsConfig) {
    var Config;
    (function (Config) {
        function sameAs(config, other) {
            var selectedBoard = config.selectedBoard, selectedPort = config.selectedPort;
            if (boards_service_1.AttachedSerialBoard.is(other)) {
                return !!selectedBoard
                    && boards_service_1.Board.equals(other, selectedBoard)
                    && boards_service_1.Port.sameAs(selectedPort, other.port);
            }
            return sameAs(config, other);
        }
        Config.sameAs = sameAs;
        function equals(left, right) {
            return left.selectedBoard === right.selectedBoard
                && left.selectedPort === right.selectedPort;
        }
        Config.equals = equals;
        function toString(config, options) {
            if (options === void 0) { options = { default: '' }; }
            var selectedBoard = config.selectedBoard, port = config.selectedPort;
            if (!selectedBoard) {
                return options.default;
            }
            var name = selectedBoard.name;
            return "" + name + (port ? ' at ' + boards_service_1.Port.toString(port) : '');
        }
        Config.toString = toString;
    })(Config = BoardsConfig.Config || (BoardsConfig.Config = {}));
})(BoardsConfig = exports.BoardsConfig || (exports.BoardsConfig = {}));
exports.BoardsConfig = BoardsConfig;
//# sourceMappingURL=boards-config.js.map