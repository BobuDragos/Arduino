"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var inversify_1 = require("inversify");
var uri_1 = require("@theia/core/lib/common/uri");
var editor_widget_1 = require("@theia/editor/lib/browser/editor-widget");
var message_service_1 = require("@theia/core/lib/common/message-service");
var command_1 = require("@theia/core/lib/common/command");
var boards_service_1 = require("../common/protocol/boards-service");
var arduino_commands_1 = require("./arduino-commands");
var core_service_1 = require("../common/protocol/core-service");
var workspace_service_ext_1 = require("./workspace-service-ext");
var boards_service_client_impl_1 = require("./boards/boards-service-client-impl");
var workspace_commands_1 = require("@theia/workspace/lib/browser/workspace-commands");
var core_1 = require("@theia/core");
var arduino_toolbar_1 = require("./toolbar/arduino-toolbar");
var browser_1 = require("@theia/editor/lib/browser");
var browser_2 = require("@theia/core/lib/browser");
var file_dialog_1 = require("@theia/filesystem/lib/browser/file-dialog");
var common_1 = require("@theia/filesystem/lib/common");
var sketches_service_1 = require("../common/protocol/sketches-service");
var tool_output_service_1 = require("../common/protocol/tool-output-service");
var common_frontend_contribution_1 = require("@theia/core/lib/browser/common-frontend-contribution");
var filesystem_frontend_contribution_1 = require("@theia/filesystem/lib/browser/filesystem-frontend-contribution");
var file_download_command_contribution_1 = require("@theia/filesystem/lib/browser/download/file-download-command-contribution");
var monaco_menu_1 = require("@theia/monaco/lib/browser/monaco-menu");
var terminal_frontend_contribution_1 = require("@theia/terminal/lib/browser/terminal-frontend-contribution");
var boards_config_dialog_1 = require("./boards/boards-config-dialog");
var boards_toolbar_item_1 = require("./boards/boards-toolbar-item");
var boards_config_1 = require("./boards/boards-config");
var monitor_connection_1 = require("./monitor/monitor-connection");
var monitor_view_contribution_1 = require("./monitor/monitor-view-contribution");
var arduino_workspace_service_1 = require("./arduino-workspace-service");
var navigator_contribution_1 = require("@theia/navigator/lib/browser/navigator-contribution");
var output_contribution_1 = require("@theia/output/lib/browser/output-contribution");
var outline_view_contribution_1 = require("@theia/outline-view/lib/browser/outline-view-contribution");
var problem_contribution_1 = require("@theia/markers/lib/browser/problem/problem-contribution");
var scm_contribution_1 = require("@theia/scm/lib/browser/scm-contribution");
var search_in_workspace_frontend_contribution_1 = require("@theia/search-in-workspace/lib/browser/search-in-workspace-frontend-contribution");
var navigator_contribution_2 = require("@theia/navigator/lib/browser/navigator-contribution");
var editor_mode_1 = require("./editor-mode");
var ArduinoMenus;
(function (ArduinoMenus) {
    ArduinoMenus.SKETCH = __spread(core_1.MAIN_MENU_BAR, ['3_sketch']);
    ArduinoMenus.TOOLS = __spread(core_1.MAIN_MENU_BAR, ['4_tools']);
})(ArduinoMenus = exports.ArduinoMenus || (exports.ArduinoMenus = {}));
var ArduinoToolbarContextMenu;
(function (ArduinoToolbarContextMenu) {
    ArduinoToolbarContextMenu.OPEN_SKETCH_PATH = ['arduino-open-sketch-context-menu'];
    ArduinoToolbarContextMenu.OPEN_GROUP = __spread(ArduinoToolbarContextMenu.OPEN_SKETCH_PATH, ['1_open']);
    ArduinoToolbarContextMenu.WS_SKETCHES_GROUP = __spread(ArduinoToolbarContextMenu.OPEN_SKETCH_PATH, ['2_sketches']);
    ArduinoToolbarContextMenu.EXAMPLE_SKETCHES_GROUP = __spread(ArduinoToolbarContextMenu.OPEN_SKETCH_PATH, ['3_examples']);
})(ArduinoToolbarContextMenu = exports.ArduinoToolbarContextMenu || (exports.ArduinoToolbarContextMenu = {}));
var ArduinoFrontendContribution = /** @class */ (function () {
    function ArduinoFrontendContribution() {
        this.wsSketchCount = 0; // TODO: this does not belong here, does it?
    }
    ArduinoFrontendContribution.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var updateStatusBar;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // This is a hack. Otherwise, the backend services won't bind.
                    return [4 /*yield*/, this.workspaceServiceExt.roots()];
                    case 1:
                        // This is a hack. Otherwise, the backend services won't bind.
                        _a.sent();
                        updateStatusBar = function (config) {
                            _this.statusBar.setElement('arduino-selected-board', {
                                alignment: browser_2.StatusBarAlignment.RIGHT,
                                text: boards_config_1.BoardsConfig.Config.toString(config)
                            });
                        };
                        this.boardsServiceClient.onBoardsConfigChanged(updateStatusBar);
                        updateStatusBar(this.boardsServiceClient.boardsConfig);
                        this.registerSketchesInMenu(this.menuRegistry);
                        Promise.all([
                            this.boardsService.getAttachedBoards(),
                            this.boardsService.getAvailablePorts()
                        ]).then(function (_a) {
                            var _b = __read(_a, 2), boards = _b[0].boards, ports = _b[1].ports;
                            return _this.boardsServiceClient.tryReconnect(boards, ports);
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    ArduinoFrontendContribution.prototype.onStart = function (app) {
        var e_1, _a;
        this.application = app;
        try {
            // Initialize all `pro-mode` widgets. This is a NOOP if in normal mode.
            for (var _b = __values([
                this.fileNavigatorContributions,
                this.outputContribution,
                this.outlineContribution,
                this.problemContribution,
                this.scmContribution,
                this.siwContribution
            ]), _c = _b.next(); !_c.done; _c = _b.next()) {
                var viewContribution = _c.value;
                if (viewContribution.initializeLayout) {
                    viewContribution.initializeLayout(this.application);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    ArduinoFrontendContribution.prototype.registerToolbarItems = function (registry) {
        var _this = this;
        registry.registerItem({
            id: arduino_commands_1.ArduinoCommands.VERIFY.id,
            command: arduino_commands_1.ArduinoCommands.VERIFY.id,
            tooltip: 'Verify'
        });
        registry.registerItem({
            id: arduino_commands_1.ArduinoCommands.UPLOAD.id,
            command: arduino_commands_1.ArduinoCommands.UPLOAD.id,
            tooltip: 'Upload'
        });
        registry.registerItem({
            id: arduino_commands_1.ArduinoCommands.SHOW_OPEN_CONTEXT_MENU.id,
            command: arduino_commands_1.ArduinoCommands.SHOW_OPEN_CONTEXT_MENU.id,
            tooltip: 'Open'
        });
        registry.registerItem({
            id: arduino_commands_1.ArduinoCommands.SAVE_SKETCH.id,
            command: arduino_commands_1.ArduinoCommands.SAVE_SKETCH.id,
            tooltip: 'Save'
        });
        registry.registerItem({
            id: boards_toolbar_item_1.BoardsToolBarItem.TOOLBAR_ID,
            render: function () { return React.createElement(boards_toolbar_item_1.BoardsToolBarItem, { key: 'boardsToolbarItem', commands: _this.commandRegistry, boardsServiceClient: _this.boardsServiceClient, boardService: _this.boardsService }); },
            isVisible: function (widget) { return arduino_toolbar_1.ArduinoToolbar.is(widget) && widget.side === 'left'; }
        });
        registry.registerItem({
            id: 'toggle-serial-monitor',
            command: monitor_view_contribution_1.MonitorViewContribution.OPEN_SERIAL_MONITOR,
            tooltip: 'Toggle Serial Monitor',
            isVisible: function (widget) { return arduino_toolbar_1.ArduinoToolbar.is(widget) && widget.side === 'right'; }
        });
        registry.registerItem({
            id: arduino_commands_1.ArduinoCommands.TOGGLE_ADVANCED_MODE.id,
            command: arduino_commands_1.ArduinoCommands.TOGGLE_ADVANCED_MODE.id,
            tooltip: 'Toggle Advanced Mode',
            text: (this.editorMode.proMode ? '$(toggle-on)' : '$(toggle-off)'),
            isVisible: function (widget) { return arduino_toolbar_1.ArduinoToolbar.is(widget) && widget.side === 'right'; }
        });
    };
    ArduinoFrontendContribution.prototype.registerCommands = function (registry) {
        var e_2, _a, e_3, _b;
        var _this = this;
        // TODO: use proper API https://github.com/eclipse-theia/theia/pull/6599
        var allHandlers = registry._handlers;
        try {
            // Make sure to reveal the `Explorer` before executing `New File` and `New Folder`.
            for (var _c = __values([workspace_commands_1.WorkspaceCommands.NEW_FILE, workspace_commands_1.WorkspaceCommands.NEW_FOLDER]), _d = _c.next(); !_d.done; _d = _c.next()) {
                var command = _d.value;
                var id = command.id;
                var handlers = allHandlers[id].slice();
                registry.unregisterCommand(id);
                registry.registerCommand(command);
                var _loop_1 = function (handler) {
                    var wrapper = {
                        execute: function () {
                            var args = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                args[_i] = arguments[_i];
                            }
                            _this.fileNavigatorContributions.openView({ reveal: true }).then(function () { return handler.execute(args); });
                        },
                        isVisible: function () {
                            var args = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                args[_i] = arguments[_i];
                            }
                            return handler.isVisible(args);
                        },
                        isEnabled: function (args) {
                            return handler.isEnabled(args);
                        },
                        isToggled: function (args) {
                            return handler.isToggled(args);
                        }
                    };
                    if (!handler.isEnabled) {
                        delete wrapper.isEnabled;
                    }
                    if (!handler.isToggled) {
                        delete wrapper.isToggled;
                    }
                    if (!handler.isVisible) {
                        delete wrapper.isVisible;
                    }
                    registry.registerHandler(id, wrapper);
                };
                try {
                    for (var handlers_1 = (e_3 = void 0, __values(handlers)), handlers_1_1 = handlers_1.next(); !handlers_1_1.done; handlers_1_1 = handlers_1.next()) {
                        var handler = handlers_1_1.value;
                        _loop_1(handler);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (handlers_1_1 && !handlers_1_1.done && (_b = handlers_1.return)) _b.call(handlers_1);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_2) throw e_2.error; }
        }
        registry.registerCommand(arduino_commands_1.ArduinoCommands.VERIFY, {
            isVisible: function (widget) { return arduino_toolbar_1.ArduinoToolbar.is(widget) && widget.side === 'left'; },
            isEnabled: function (widget) { return true; },
            execute: function () { return __awaiter(_this, void 0, void 0, function () {
                var widget, uri, boardsConfig, e_4;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            widget = this.getCurrentWidget();
                            if (!(widget instanceof editor_widget_1.EditorWidget)) return [3 /*break*/, 2];
                            return [4 /*yield*/, widget.saveable.save()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            uri = this.toUri(widget);
                            if (!uri) {
                                return [2 /*return*/];
                            }
                            _a.label = 3;
                        case 3:
                            _a.trys.push([3, 5, , 7]);
                            boardsConfig = this.boardsServiceClient.boardsConfig;
                            if (!boardsConfig || !boardsConfig.selectedBoard) {
                                throw new Error('No boards selected. Please select a board.');
                            }
                            if (!boardsConfig.selectedBoard.fqbn) {
                                throw new Error("No core is installed for " + boardsConfig.selectedBoard.name + ". Please install the board.");
                            }
                            // Reveal the Output view asynchronously (don't await it)
                            this.outputContribution.openView({ reveal: true });
                            return [4 /*yield*/, this.coreService.compile({ uri: uri.toString(), board: boardsConfig.selectedBoard })];
                        case 4:
                            _a.sent();
                            return [3 /*break*/, 7];
                        case 5:
                            e_4 = _a.sent();
                            return [4 /*yield*/, this.messageService.error(e_4.toString())];
                        case 6:
                            _a.sent();
                            return [3 /*break*/, 7];
                        case 7: return [2 /*return*/];
                    }
                });
            }); }
        });
        registry.registerCommand(arduino_commands_1.ArduinoCommands.UPLOAD, {
            isVisible: function (widget) { return arduino_toolbar_1.ArduinoToolbar.is(widget) && widget.side === 'left'; },
            isEnabled: function (widget) { return true; },
            execute: function () { return __awaiter(_this, void 0, void 0, function () {
                var widget, uri, monitorConfig, boardsConfig, selectedPort, e_5;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            widget = this.getCurrentWidget();
                            if (!(widget instanceof editor_widget_1.EditorWidget)) return [3 /*break*/, 2];
                            return [4 /*yield*/, widget.saveable.save()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            uri = this.toUri(widget);
                            if (!uri) {
                                return [2 /*return*/];
                            }
                            monitorConfig = this.monitorConnection.monitorConfig;
                            if (!monitorConfig) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.monitorConnection.disconnect()];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4:
                            _a.trys.push([4, 6, 8, 11]);
                            boardsConfig = this.boardsServiceClient.boardsConfig;
                            if (!boardsConfig || !boardsConfig.selectedBoard) {
                                throw new Error('No boards selected. Please select a board.');
                            }
                            selectedPort = boardsConfig.selectedPort;
                            if (!selectedPort) {
                                throw new Error('No ports selected. Please select a port.');
                            }
                            // Reveal the Output view asynchronously (don't await it)
                            this.outputContribution.openView({ reveal: true });
                            return [4 /*yield*/, this.coreService.upload({ uri: uri.toString(), board: boardsConfig.selectedBoard, port: selectedPort.address })];
                        case 5:
                            _a.sent();
                            return [3 /*break*/, 11];
                        case 6:
                            e_5 = _a.sent();
                            return [4 /*yield*/, this.messageService.error(e_5.toString())];
                        case 7:
                            _a.sent();
                            return [3 /*break*/, 11];
                        case 8:
                            if (!monitorConfig) return [3 /*break*/, 10];
                            return [4 /*yield*/, this.monitorConnection.connect(monitorConfig)];
                        case 9:
                            _a.sent();
                            _a.label = 10;
                        case 10: return [7 /*endfinally*/];
                        case 11: return [2 /*return*/];
                    }
                });
            }); }
        });
        registry.registerCommand(arduino_commands_1.ArduinoCommands.SHOW_OPEN_CONTEXT_MENU, {
            isVisible: function (widget) { return arduino_toolbar_1.ArduinoToolbar.is(widget) && widget.side === 'left'; },
            isEnabled: function (widget) { return arduino_toolbar_1.ArduinoToolbar.is(widget) && widget.side === 'left'; },
            execute: function (widget, target) { return __awaiter(_this, void 0, void 0, function () {
                var el;
                return __generator(this, function (_a) {
                    if (this.wsSketchCount) {
                        el = target.parentElement;
                        if (el) {
                            this.contextMenuRenderer.render(ArduinoToolbarContextMenu.OPEN_SKETCH_PATH, {
                                x: el.getBoundingClientRect().left,
                                y: el.getBoundingClientRect().top + el.offsetHeight
                            });
                        }
                    }
                    else {
                        this.commandRegistry.executeCommand(arduino_commands_1.ArduinoCommands.OPEN_FILE_NAVIGATOR.id);
                    }
                    return [2 /*return*/];
                });
            }); }
        });
        registry.registerCommand(arduino_commands_1.ArduinoCommands.OPEN_FILE_NAVIGATOR, {
            isEnabled: function () { return true; },
            execute: function () { return _this.doOpenFile(); }
        });
        registry.registerCommand(arduino_commands_1.ArduinoCommands.OPEN_SKETCH, {
            isEnabled: function () { return true; },
            execute: function (sketch) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.workspaceService.open(new uri_1.default(sketch.uri));
                    return [2 /*return*/];
                });
            }); }
        });
        registry.registerCommand(arduino_commands_1.ArduinoCommands.SAVE_SKETCH, {
            isEnabled: function (widget) { return arduino_toolbar_1.ArduinoToolbar.is(widget) && widget.side === 'left'; },
            isVisible: function (widget) { return arduino_toolbar_1.ArduinoToolbar.is(widget) && widget.side === 'left'; },
            execute: function (sketch) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    registry.executeCommand(common_frontend_contribution_1.CommonCommands.SAVE_ALL.id);
                    return [2 /*return*/];
                });
            }); }
        });
        registry.registerCommand(arduino_commands_1.ArduinoCommands.NEW_SKETCH, new workspace_commands_1.WorkspaceRootUriAwareCommandHandler(this.workspaceService, this.selectionService, {
            execute: function (uri) { return __awaiter(_this, void 0, void 0, function () {
                var sketch, e_6;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 4]);
                            // hack: sometimes we don't get the workspace root, but the currently active file: correct for that
                            if (uri.path.ext !== "") {
                                uri = uri.withPath(uri.path.dir.dir);
                            }
                            return [4 /*yield*/, this.sketchService.createNewSketch(uri.toString())];
                        case 1:
                            sketch = _a.sent();
                            this.workspaceService.open(new uri_1.default(sketch.uri));
                            return [3 /*break*/, 4];
                        case 2:
                            e_6 = _a.sent();
                            return [4 /*yield*/, this.messageService.error(e_6.toString())];
                        case 3:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            }); }
        }));
        registry.registerCommand(arduino_commands_1.ArduinoCommands.OPEN_BOARDS_DIALOG, {
            isEnabled: function () { return true; },
            execute: function () { return __awaiter(_this, void 0, void 0, function () {
                var boardsConfig;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.boardsConfigDialog.open()];
                        case 1:
                            boardsConfig = _a.sent();
                            if (boardsConfig) {
                                this.boardsServiceClient.boardsConfig = boardsConfig;
                            }
                            return [2 /*return*/];
                    }
                });
            }); }
        });
        registry.registerCommand(arduino_commands_1.ArduinoCommands.TOGGLE_ADVANCED_MODE, {
            execute: function () { return _this.editorMode.toggle(); },
            isVisible: function (widget) { return arduino_toolbar_1.ArduinoToolbar.is(widget) && widget.side === 'right'; },
            isToggled: function () { return _this.editorMode.proMode; }
        });
    };
    ArduinoFrontendContribution.prototype.registerMenus = function (registry) {
        var e_7, _a;
        if (!this.editorMode.proMode) {
            try {
                // If are not in pro-mode, we have to disable the context menu for the tabs.
                // Such as `Close`, `Close All`, etc.
                for (var _b = __values([
                    common_frontend_contribution_1.CommonCommands.CLOSE_TAB,
                    common_frontend_contribution_1.CommonCommands.CLOSE_OTHER_TABS,
                    common_frontend_contribution_1.CommonCommands.CLOSE_RIGHT_TABS,
                    common_frontend_contribution_1.CommonCommands.CLOSE_ALL_TABS,
                    common_frontend_contribution_1.CommonCommands.COLLAPSE_PANEL,
                    common_frontend_contribution_1.CommonCommands.TOGGLE_MAXIMIZED,
                    navigator_contribution_2.FileNavigatorCommands.REVEAL_IN_NAVIGATOR
                ]), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var command = _c.value;
                    registry.unregisterMenuAction(command);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_7) throw e_7.error; }
            }
            registry.unregisterMenuAction(filesystem_frontend_contribution_1.FileSystemCommands.UPLOAD);
            registry.unregisterMenuAction(file_download_command_contribution_1.FileDownloadCommands.DOWNLOAD);
            registry.unregisterMenuAction(workspace_commands_1.WorkspaceCommands.OPEN_FOLDER);
            registry.unregisterMenuAction(workspace_commands_1.WorkspaceCommands.OPEN_WORKSPACE);
            registry.unregisterMenuAction(workspace_commands_1.WorkspaceCommands.OPEN_RECENT_WORKSPACE);
            registry.unregisterMenuAction(workspace_commands_1.WorkspaceCommands.SAVE_WORKSPACE_AS);
            registry.unregisterMenuAction(workspace_commands_1.WorkspaceCommands.CLOSE);
            registry.getMenu(core_1.MAIN_MENU_BAR).removeNode(this.getMenuId(monaco_menu_1.MonacoMenus.SELECTION));
            registry.getMenu(core_1.MAIN_MENU_BAR).removeNode(this.getMenuId(browser_1.EditorMainMenu.GO));
            registry.getMenu(core_1.MAIN_MENU_BAR).removeNode(this.getMenuId(terminal_frontend_contribution_1.TerminalMenus.TERMINAL));
            registry.getMenu(core_1.MAIN_MENU_BAR).removeNode(this.getMenuId(common_frontend_contribution_1.CommonMenus.VIEW));
        }
        registry.registerSubmenu(ArduinoMenus.SKETCH, 'Sketch');
        registry.registerMenuAction(ArduinoMenus.SKETCH, {
            commandId: arduino_commands_1.ArduinoCommands.VERIFY.id,
            label: 'Verify/Compile',
            order: '1'
        });
        registry.registerMenuAction(ArduinoMenus.SKETCH, {
            commandId: arduino_commands_1.ArduinoCommands.UPLOAD.id,
            label: 'Upload',
            order: '2'
        });
        registry.registerMenuAction(ArduinoToolbarContextMenu.OPEN_GROUP, {
            commandId: arduino_commands_1.ArduinoCommands.OPEN_FILE_NAVIGATOR.id,
            label: 'Open...'
        });
        registry.registerSubmenu(ArduinoMenus.TOOLS, 'Tools');
        registry.registerMenuAction(common_frontend_contribution_1.CommonMenus.HELP, {
            commandId: arduino_commands_1.ArduinoCommands.TOGGLE_ADVANCED_MODE.id,
            label: 'Advanced Mode'
        });
        registry.registerMenuAction(__spread(common_frontend_contribution_1.CommonMenus.FILE, ['0_new_sketch']), {
            commandId: arduino_commands_1.ArduinoCommands.NEW_SKETCH.id
        });
    };
    ArduinoFrontendContribution.prototype.getMenuId = function (menuPath) {
        var index = menuPath.length - 1;
        var menuId = menuPath[index];
        return menuId;
    };
    ArduinoFrontendContribution.prototype.registerKeybindings = function (keybindings) {
        keybindings.registerKeybinding({
            command: arduino_commands_1.ArduinoCommands.VERIFY.id,
            keybinding: 'ctrlcmd+alt+v'
        });
        keybindings.registerKeybinding({
            command: arduino_commands_1.ArduinoCommands.UPLOAD.id,
            keybinding: 'ctrlcmd+alt+u'
        });
    };
    ArduinoFrontendContribution.prototype.registerSketchesInMenu = function (registry) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                this.sketchService.getSketches().then(function (sketches) {
                    _this.wsSketchCount = sketches.length;
                    sketches.forEach(function (sketch) {
                        var command = {
                            id: 'openSketch' + sketch.name
                        };
                        _this.commandRegistry.registerCommand(command, {
                            execute: function () { return _this.commandRegistry.executeCommand(arduino_commands_1.ArduinoCommands.OPEN_SKETCH.id, sketch); }
                        });
                        registry.registerMenuAction(ArduinoToolbarContextMenu.WS_SKETCHES_GROUP, {
                            commandId: command.id,
                            label: sketch.name
                        });
                    });
                });
                return [2 /*return*/];
            });
        });
    };
    ArduinoFrontendContribution.prototype.openSketchFiles = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                this.sketchService.getSketchFiles(uri).then(function (uris) {
                    var e_8, _a;
                    try {
                        for (var uris_1 = __values(uris), uris_1_1 = uris_1.next(); !uris_1_1.done; uris_1_1 = uris_1.next()) {
                            var uri_2 = uris_1_1.value;
                            _this.editorManager.open(new uri_1.default(uri_2));
                        }
                    }
                    catch (e_8_1) { e_8 = { error: e_8_1 }; }
                    finally {
                        try {
                            if (uris_1_1 && !uris_1_1.done && (_a = uris_1.return)) _a.call(uris_1);
                        }
                        finally { if (e_8) throw e_8.error; }
                    }
                });
                return [2 /*return*/];
            });
        });
    };
    /**
     * Opens a file after prompting the `Open File` dialog. Resolves to `undefined`, if
     *  - the workspace root is not set,
     *  - the file to open does not exist, or
     *  - it was not a file, but a directory.
     *
     * Otherwise, resolves to the URI of the file.
     */
    ArduinoFrontendContribution.prototype.doOpenFile = function () {
        return __awaiter(this, void 0, void 0, function () {
            var props, _a, rootStat, destinationFileUri, destinationFile, message;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        props = {
                            title: workspace_commands_1.WorkspaceCommands.OPEN_FILE.dialogLabel,
                            canSelectFolders: false,
                            canSelectFiles: true
                        };
                        return [4 /*yield*/, this.workspaceService.roots];
                    case 1:
                        _a = __read.apply(void 0, [_b.sent(), 1]), rootStat = _a[0];
                        return [4 /*yield*/, this.fileDialogService.showOpenDialog(props, rootStat)];
                    case 2:
                        destinationFileUri = _b.sent();
                        if (!destinationFileUri) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.fileSystem.getFileStat(destinationFileUri.toString())];
                    case 3:
                        destinationFile = _b.sent();
                        if (!(destinationFile && !destinationFile.isDirectory)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.validate(destinationFile)];
                    case 4:
                        message = _b.sent();
                        if (!message) {
                            this.workspaceService.open(destinationFileUri);
                            return [2 /*return*/, destinationFileUri];
                        }
                        else {
                            this.messageService.warn(message);
                        }
                        _b.label = 5;
                    case 5: return [2 /*return*/, undefined];
                }
            });
        });
    };
    ArduinoFrontendContribution.prototype.getCurrentWidget = function () {
        var widget = this.editorManager.currentEditor;
        if (!widget) {
            var visibleWidgets = this.editorManager.all.filter(function (w) { return w.isVisible; });
            if (visibleWidgets.length > 0) {
                widget = visibleWidgets[0];
            }
        }
        return widget;
    };
    /**
     * Returns `undefined` if the `file` is valid. Otherwise, returns with the validation error message.
     */
    ArduinoFrontendContribution.prototype.validate = function (file) {
        var uri = new uri_1.default(file.uri);
        var path = uri.path;
        var name = path.name, ext = path.ext, dir = path.dir;
        if (ext !== '.ino') {
            return "Only sketches with '.ino' extension can be opened.";
        }
        if (name !== dir.name) {
            return "The file \"" + name + ext + "\" needs to be inside a sketch folder named \"" + name + "\".";
        }
        return undefined;
    };
    ArduinoFrontendContribution.prototype.toUri = function (arg) {
        if (arg instanceof uri_1.default) {
            return arg;
        }
        if (typeof arg === 'string') {
            return new uri_1.default(arg);
        }
        if (arg instanceof editor_widget_1.EditorWidget) {
            return arg.editor.uri;
        }
        return undefined;
    };
    __decorate([
        inversify_1.inject(message_service_1.MessageService),
        __metadata("design:type", message_service_1.MessageService)
    ], ArduinoFrontendContribution.prototype, "messageService", void 0);
    __decorate([
        inversify_1.inject(boards_service_1.BoardsService),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "boardsService", void 0);
    __decorate([
        inversify_1.inject(core_service_1.CoreService),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "coreService", void 0);
    __decorate([
        inversify_1.inject(workspace_service_ext_1.WorkspaceServiceExt),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "workspaceServiceExt", void 0);
    __decorate([
        inversify_1.inject(tool_output_service_1.ToolOutputServiceClient),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "toolOutputServiceClient", void 0);
    __decorate([
        inversify_1.inject(boards_service_client_impl_1.BoardsServiceClientImpl),
        __metadata("design:type", boards_service_client_impl_1.BoardsServiceClientImpl)
    ], ArduinoFrontendContribution.prototype, "boardsServiceClient", void 0);
    __decorate([
        inversify_1.inject(core_1.SelectionService),
        __metadata("design:type", core_1.SelectionService)
    ], ArduinoFrontendContribution.prototype, "selectionService", void 0);
    __decorate([
        inversify_1.inject(browser_1.EditorManager),
        __metadata("design:type", browser_1.EditorManager)
    ], ArduinoFrontendContribution.prototype, "editorManager", void 0);
    __decorate([
        inversify_1.inject(browser_2.ContextMenuRenderer),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "contextMenuRenderer", void 0);
    __decorate([
        inversify_1.inject(file_dialog_1.FileDialogService),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "fileDialogService", void 0);
    __decorate([
        inversify_1.inject(common_1.FileSystem),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "fileSystem", void 0);
    __decorate([
        inversify_1.inject(sketches_service_1.SketchesService),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "sketchService", void 0);
    __decorate([
        inversify_1.inject(boards_config_dialog_1.BoardsConfigDialog),
        __metadata("design:type", boards_config_dialog_1.BoardsConfigDialog)
    ], ArduinoFrontendContribution.prototype, "boardsConfigDialog", void 0);
    __decorate([
        inversify_1.inject(core_1.MenuModelRegistry),
        __metadata("design:type", core_1.MenuModelRegistry)
    ], ArduinoFrontendContribution.prototype, "menuRegistry", void 0);
    __decorate([
        inversify_1.inject(command_1.CommandRegistry),
        __metadata("design:type", command_1.CommandRegistry)
    ], ArduinoFrontendContribution.prototype, "commandRegistry", void 0);
    __decorate([
        inversify_1.inject(browser_2.StatusBar),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "statusBar", void 0);
    __decorate([
        inversify_1.inject(arduino_workspace_service_1.ArduinoWorkspaceService),
        __metadata("design:type", arduino_workspace_service_1.ArduinoWorkspaceService)
    ], ArduinoFrontendContribution.prototype, "workspaceService", void 0);
    __decorate([
        inversify_1.inject(monitor_connection_1.MonitorConnection),
        __metadata("design:type", monitor_connection_1.MonitorConnection)
    ], ArduinoFrontendContribution.prototype, "monitorConnection", void 0);
    __decorate([
        inversify_1.inject(navigator_contribution_1.FileNavigatorContribution),
        __metadata("design:type", navigator_contribution_1.FileNavigatorContribution)
    ], ArduinoFrontendContribution.prototype, "fileNavigatorContributions", void 0);
    __decorate([
        inversify_1.inject(output_contribution_1.OutputContribution),
        __metadata("design:type", output_contribution_1.OutputContribution)
    ], ArduinoFrontendContribution.prototype, "outputContribution", void 0);
    __decorate([
        inversify_1.inject(outline_view_contribution_1.OutlineViewContribution),
        __metadata("design:type", outline_view_contribution_1.OutlineViewContribution)
    ], ArduinoFrontendContribution.prototype, "outlineContribution", void 0);
    __decorate([
        inversify_1.inject(problem_contribution_1.ProblemContribution),
        __metadata("design:type", problem_contribution_1.ProblemContribution)
    ], ArduinoFrontendContribution.prototype, "problemContribution", void 0);
    __decorate([
        inversify_1.inject(scm_contribution_1.ScmContribution),
        __metadata("design:type", scm_contribution_1.ScmContribution)
    ], ArduinoFrontendContribution.prototype, "scmContribution", void 0);
    __decorate([
        inversify_1.inject(search_in_workspace_frontend_contribution_1.SearchInWorkspaceFrontendContribution),
        __metadata("design:type", search_in_workspace_frontend_contribution_1.SearchInWorkspaceFrontendContribution)
    ], ArduinoFrontendContribution.prototype, "siwContribution", void 0);
    __decorate([
        inversify_1.inject(editor_mode_1.EditorMode),
        __metadata("design:type", editor_mode_1.EditorMode)
    ], ArduinoFrontendContribution.prototype, "editorMode", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], ArduinoFrontendContribution.prototype, "init", null);
    ArduinoFrontendContribution = __decorate([
        inversify_1.injectable()
    ], ArduinoFrontendContribution);
    return ArduinoFrontendContribution;
}());
exports.ArduinoFrontendContribution = ArduinoFrontendContribution;
//# sourceMappingURL=arduino-frontend-contribution.js.map