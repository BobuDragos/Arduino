"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var grpc = require("@grpc/grpc-js");
var PQueue = require("p-queue");
var inversify_1 = require("inversify");
var uri_1 = require("@theia/core/lib/common/uri");
var common_1 = require("@theia/filesystem/lib/common");
var workspace_service_ext_1 = require("../browser/workspace-service-ext");
var tool_output_service_1 = require("../common/protocol/tool-output-service");
var commands_grpc_pb_1 = require("./cli-protocol/commands/commands_grpc_pb");
var commands_pb_1 = require("./cli-protocol/commands/commands_pb");
var arduino_cli_1 = require("./arduino-cli");
var node_1 = require("@theia/core/lib/node");
var CoreClientProviderImpl = /** @class */ (function () {
    function CoreClientProviderImpl() {
        this.clients = new Map();
        this.clientRequestQueue = new PQueue({ autoStart: true, concurrency: 1 });
    }
    CoreClientProviderImpl.prototype.getClient = function (workspaceRootOrResourceUri) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.clientRequestQueue.add(function () { return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                        var roots, e_1, root;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    roots = undefined;
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    return [4 /*yield*/, this.workspaceServiceExt.roots()];
                                case 2:
                                    roots = _a.sent();
                                    return [3 /*break*/, 4];
                                case 3:
                                    e_1 = _a.sent();
                                    if (e_1 instanceof Error && e_1.message === 'Connection got disposed.') {
                                        console.info('The frontend has already disconnected.');
                                        // Ignore it for now: https://github.com/eclipse-theia/theia/issues/6499
                                        // Client has disconnected, and the server still runs the serial board poll.
                                        // The poll requires the client's workspace roots, but the client has disconnected :/
                                    }
                                    else {
                                        throw e_1;
                                    }
                                    return [3 /*break*/, 4];
                                case 4:
                                    if (!roots) {
                                        resolve(undefined);
                                        return [2 /*return*/];
                                    }
                                    if (!workspaceRootOrResourceUri) {
                                        resolve(this.getOrCreateClient(roots[0]));
                                        return [2 /*return*/];
                                    }
                                    root = roots
                                        .sort(function (left, right) { return right.length - left.length; }) // Longest "paths" first
                                        .map(function (uri) { return new uri_1.default(uri); })
                                        .find(function (uri) { return uri.isEqualOrParent(new uri_1.default(workspaceRootOrResourceUri)); });
                                    if (!root) {
                                        console.warn("Could not retrieve the container workspace root for URI: " + workspaceRootOrResourceUri + ".");
                                        console.warn("Falling back to " + roots[0]);
                                        resolve(this.getOrCreateClient(roots[0]));
                                        return [2 /*return*/];
                                    }
                                    resolve(this.getOrCreateClient(root.toString()));
                                    return [2 /*return*/];
                            }
                        });
                    }); }); })];
            });
        });
    };
    CoreClientProviderImpl.prototype.getOrCreateClient = function (rootUri) {
        return __awaiter(this, void 0, void 0, function () {
            var existing, client, config, rootPath, _a, dataDirUri, sketchDirUri, dataDirPath, sketchDirPath, downloadDir, initReq, initResp, instance, indexUpdateSucceeded, i, e_2, libIndexUpdateSucceeded, i, e_3, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!rootUri) {
                            return [2 /*return*/, undefined];
                        }
                        existing = this.clients.get(rootUri);
                        if (existing) {
                            console.debug("Reusing existing client for " + rootUri + ".");
                            return [2 /*return*/, existing];
                        }
                        console.info(" >>> Creating and caching a new client for " + rootUri + "...");
                        client = new commands_grpc_pb_1.ArduinoCoreClient('localhost:50051', grpc.credentials.createInsecure());
                        config = new commands_pb_1.Configuration();
                        return [4 /*yield*/, this.fileSystem.getFsPath(rootUri)];
                    case 1:
                        rootPath = _b.sent();
                        if (!rootPath) {
                            throw new Error("Could not resolve filesystem path of URI: " + rootUri + ".");
                        }
                        return [4 /*yield*/, this.cli.getDefaultConfig()];
                    case 2:
                        _a = _b.sent(), dataDirUri = _a.dataDirUri, sketchDirUri = _a.sketchDirUri;
                        dataDirPath = node_1.FileUri.fsPath(dataDirUri);
                        sketchDirPath = node_1.FileUri.fsPath(sketchDirUri);
                        if (!fs.existsSync(dataDirPath)) {
                            fs.mkdirSync(dataDirPath);
                        }
                        if (!fs.existsSync(sketchDirPath)) {
                            fs.mkdirSync(sketchDirPath);
                        }
                        downloadDir = path.join(dataDirPath, 'staging');
                        if (!fs.existsSync(downloadDir)) {
                            fs.mkdirSync(downloadDir);
                        }
                        config.setSketchbookdir(sketchDirPath);
                        config.setDatadir(dataDirPath);
                        config.setDownloadsdir(downloadDir);
                        config.setBoardmanageradditionalurlsList(['https://downloads.arduino.cc/packages/package_index.json']);
                        initReq = new commands_pb_1.InitReq();
                        initReq.setConfiguration(config);
                        initReq.setLibraryManagerOnly(false);
                        return [4 /*yield*/, new Promise(function (resolve) {
                                var resp = undefined;
                                var stream = client.init(initReq);
                                stream.on('data', function (data) { return resp = data; });
                                stream.on('end', function () { return resolve(resp); });
                            })];
                    case 3:
                        initResp = _b.sent();
                        instance = initResp.getInstance();
                        if (!instance) {
                            throw new Error("Could not retrieve instance from the initialize response.");
                        }
                        indexUpdateSucceeded = true;
                        i = 0;
                        _b.label = 4;
                    case 4:
                        if (!(i < 10)) return [3 /*break*/, 9];
                        _b.label = 5;
                    case 5:
                        _b.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this.updateIndex(client, instance)];
                    case 6:
                        _b.sent();
                        indexUpdateSucceeded = true;
                        return [3 /*break*/, 9];
                    case 7:
                        e_2 = _b.sent();
                        this.toolOutputService.publishNewOutput("daemon", "Error while updating index in attempt " + i + ": " + e_2);
                        return [3 /*break*/, 8];
                    case 8:
                        i++;
                        return [3 /*break*/, 4];
                    case 9:
                        if (!indexUpdateSucceeded) {
                            this.toolOutputService.publishNewOutput("daemon", "Was unable to update the index. Please restart to try again.");
                        }
                        libIndexUpdateSucceeded = true;
                        i = 0;
                        _b.label = 10;
                    case 10:
                        if (!(i < 10)) return [3 /*break*/, 15];
                        _b.label = 11;
                    case 11:
                        _b.trys.push([11, 13, , 14]);
                        return [4 /*yield*/, this.updateLibraryIndex(client, instance)];
                    case 12:
                        _b.sent();
                        libIndexUpdateSucceeded = true;
                        return [3 /*break*/, 15];
                    case 13:
                        e_3 = _b.sent();
                        this.toolOutputService.publishNewOutput("daemon", "Error while updating library index in attempt " + i + ": " + e_3);
                        return [3 /*break*/, 14];
                    case 14:
                        i++;
                        return [3 /*break*/, 10];
                    case 15:
                        if (!libIndexUpdateSucceeded) {
                            this.toolOutputService.publishNewOutput("daemon", "Was unable to update the library index. Please restart to try again.");
                        }
                        result = {
                            client: client,
                            instance: instance
                        };
                        this.clients.set(rootUri, result);
                        console.info(" <<< New client has been successfully created and cached for " + rootUri + ".");
                        return [2 /*return*/, result];
                }
            });
        });
    };
    CoreClientProviderImpl.prototype.updateLibraryIndex = function (client, instance) {
        return __awaiter(this, void 0, void 0, function () {
            var req, resp, file;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        req = new commands_pb_1.UpdateLibrariesIndexReq();
                        req.setInstance(instance);
                        resp = client.updateLibrariesIndex(req);
                        resp.on('data', function (data) {
                            var progress = data.getDownloadProgress();
                            if (progress) {
                                if (!file && progress.getFile()) {
                                    file = "" + progress.getFile();
                                }
                                if (progress.getCompleted()) {
                                    if (file) {
                                        if (/\s/.test(file)) {
                                            _this.toolOutputService.publishNewOutput("daemon", file + " completed.\n");
                                        }
                                        else {
                                            _this.toolOutputService.publishNewOutput("daemon", "Download of '" + file + "' completed.\n'");
                                        }
                                    }
                                    else {
                                        _this.toolOutputService.publishNewOutput("daemon", "The library index has been successfully updated.\n'");
                                    }
                                    file = undefined;
                                }
                            }
                        });
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                resp.on('error', reject);
                                resp.on('end', resolve);
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CoreClientProviderImpl.prototype.updateIndex = function (client, instance) {
        return __awaiter(this, void 0, void 0, function () {
            var updateReq, updateResp, file;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        updateReq = new commands_pb_1.UpdateIndexReq();
                        updateReq.setInstance(instance);
                        updateResp = client.updateIndex(updateReq);
                        updateResp.on('data', function (o) {
                            var progress = o.getDownloadProgress();
                            if (progress) {
                                if (!file && progress.getFile()) {
                                    file = "" + progress.getFile();
                                }
                                if (progress.getCompleted()) {
                                    if (file) {
                                        if (/\s/.test(file)) {
                                            _this.toolOutputService.publishNewOutput("daemon", file + " completed.\n");
                                        }
                                        else {
                                            _this.toolOutputService.publishNewOutput("daemon", "Download of '" + file + "' completed.\n'");
                                        }
                                    }
                                    else {
                                        _this.toolOutputService.publishNewOutput("daemon", "The index has been successfully updated.\n'");
                                    }
                                    file = undefined;
                                }
                            }
                        });
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                updateResp.on('error', reject);
                                updateResp.on('end', resolve);
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    __decorate([
        inversify_1.inject(common_1.FileSystem),
        __metadata("design:type", Object)
    ], CoreClientProviderImpl.prototype, "fileSystem", void 0);
    __decorate([
        inversify_1.inject(workspace_service_ext_1.WorkspaceServiceExt),
        __metadata("design:type", Object)
    ], CoreClientProviderImpl.prototype, "workspaceServiceExt", void 0);
    __decorate([
        inversify_1.inject(tool_output_service_1.ToolOutputServiceServer),
        __metadata("design:type", Object)
    ], CoreClientProviderImpl.prototype, "toolOutputService", void 0);
    __decorate([
        inversify_1.inject(arduino_cli_1.ArduinoCli),
        __metadata("design:type", arduino_cli_1.ArduinoCli)
    ], CoreClientProviderImpl.prototype, "cli", void 0);
    CoreClientProviderImpl = __decorate([
        inversify_1.injectable()
    ], CoreClientProviderImpl);
    return CoreClientProviderImpl;
}());
exports.CoreClientProviderImpl = CoreClientProviderImpl;
//# sourceMappingURL=core-client-provider-impl.js.map