"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var os = require("os");
var which = require("which");
var semver = require("semver");
var child_process_1 = require("child_process");
var path_1 = require("path");
function getExecPath(commandName, logger, versionArg, inBinDir) {
    return __awaiter(this, void 0, void 0, function () {
        var execName, relativePath, buildCommand, versionRegexp, buildVersion, buildShortVersion, pathCommand, pathVersion, pathShortVersion;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    execName = "" + commandName + (os.platform() === 'win32' ? '.exe' : '');
                    relativePath = ['..', '..', 'build'];
                    if (inBinDir) {
                        relativePath.push('bin');
                    }
                    buildCommand = path_1.join.apply(void 0, __spread([__dirname], relativePath, [execName]));
                    if (!versionArg) {
                        return [2 /*return*/, buildCommand];
                    }
                    versionRegexp = /\d+\.\d+\.\d+/;
                    return [4 /*yield*/, spawnCommand("\"" + buildCommand + "\"", [versionArg], logger)];
                case 1:
                    buildVersion = _a.sent();
                    buildShortVersion = (buildVersion.match(versionRegexp) || [])[0];
                    return [4 /*yield*/, new Promise(function (resolve) { return which(execName, function (error, path) { return resolve(error ? undefined : path); }); })];
                case 2:
                    pathCommand = _a.sent();
                    if (!pathCommand) {
                        return [2 /*return*/, buildCommand];
                    }
                    return [4 /*yield*/, spawnCommand("\"" + pathCommand + "\"", [versionArg], logger)];
                case 3:
                    pathVersion = _a.sent();
                    pathShortVersion = (pathVersion.match(versionRegexp) || [])[0];
                    if (semver.gt(pathShortVersion, buildShortVersion)) {
                        return [2 /*return*/, pathCommand];
                    }
                    return [2 /*return*/, buildCommand];
            }
        });
    });
}
exports.getExecPath = getExecPath;
function spawnCommand(command, args, logger) {
    return new Promise(function (resolve, reject) {
        var cp = child_process_1.spawn(command, args, { windowsHide: true, shell: true });
        var buffers = [];
        cp.stdout.on('data', function (b) { return buffers.push(b); });
        cp.on('error', function (error) {
            logger.error("Error executing " + command + " with args: " + JSON.stringify(args) + ".", error);
            reject(error);
        });
        cp.on('exit', function (code, signal) {
            if (code === 0) {
                var result = Buffer.concat(buffers).toString('utf8').trim();
                resolve(result);
                return;
            }
            if (signal) {
                logger.error("Unexpected signal '" + signal + "' when executing " + command + " with args: " + JSON.stringify(args) + ".");
                reject(new Error("Process exited with signal: " + signal));
                return;
            }
            if (code) {
                logger.error("Unexpected exit code '" + code + "' when executing " + command + " with args: " + JSON.stringify(args) + ".");
                reject(new Error("Process exited with exit code: " + code));
                return;
            }
        });
    });
}
exports.spawnCommand = spawnCommand;
//# sourceMappingURL=exec-util.js.map